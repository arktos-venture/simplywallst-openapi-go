/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DevelopmentEventTypes struct for DevelopmentEventTypes
type DevelopmentEventTypes struct {
	Data *[]DevelopmentEventType `json:"data,omitempty"`
}

// NewDevelopmentEventTypes instantiates a new DevelopmentEventTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevelopmentEventTypes() *DevelopmentEventTypes {
	this := DevelopmentEventTypes{}
	return &this
}

// NewDevelopmentEventTypesWithDefaults instantiates a new DevelopmentEventTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevelopmentEventTypesWithDefaults() *DevelopmentEventTypes {
	this := DevelopmentEventTypes{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *DevelopmentEventTypes) GetData() []DevelopmentEventType {
	if o == nil || o.Data == nil {
		var ret []DevelopmentEventType
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevelopmentEventTypes) GetDataOk() (*[]DevelopmentEventType, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *DevelopmentEventTypes) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []DevelopmentEventType and assigns it to the Data field.
func (o *DevelopmentEventTypes) SetData(v []DevelopmentEventType) {
	o.Data = &v
}

func (o DevelopmentEventTypes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableDevelopmentEventTypes struct {
	value *DevelopmentEventTypes
	isSet bool
}

func (v NullableDevelopmentEventTypes) Get() *DevelopmentEventTypes {
	return v.value
}

func (v *NullableDevelopmentEventTypes) Set(val *DevelopmentEventTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableDevelopmentEventTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableDevelopmentEventTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevelopmentEventTypes(val *DevelopmentEventTypes) *NullableDevelopmentEventTypes {
	return &NullableDevelopmentEventTypes{value: val, isSet: true}
}

func (v NullableDevelopmentEventTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevelopmentEventTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
