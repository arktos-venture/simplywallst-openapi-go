/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InternationalMarketData struct for InternationalMarketData
type InternationalMarketData struct {
	Top   *map[string]InternationalMarketReturn `json:"top,omitempty"`
	Worst *map[string]InternationalMarketReturn `json:"worst,omitempty"`
}

// NewInternationalMarketData instantiates a new InternationalMarketData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternationalMarketData() *InternationalMarketData {
	this := InternationalMarketData{}
	return &this
}

// NewInternationalMarketDataWithDefaults instantiates a new InternationalMarketData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternationalMarketDataWithDefaults() *InternationalMarketData {
	this := InternationalMarketData{}
	return &this
}

// GetTop returns the Top field value if set, zero value otherwise.
func (o *InternationalMarketData) GetTop() map[string]InternationalMarketReturn {
	if o == nil || o.Top == nil {
		var ret map[string]InternationalMarketReturn
		return ret
	}
	return *o.Top
}

// GetTopOk returns a tuple with the Top field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalMarketData) GetTopOk() (*map[string]InternationalMarketReturn, bool) {
	if o == nil || o.Top == nil {
		return nil, false
	}
	return o.Top, true
}

// HasTop returns a boolean if a field has been set.
func (o *InternationalMarketData) HasTop() bool {
	if o != nil && o.Top != nil {
		return true
	}

	return false
}

// SetTop gets a reference to the given map[string]InternationalMarketReturn and assigns it to the Top field.
func (o *InternationalMarketData) SetTop(v map[string]InternationalMarketReturn) {
	o.Top = &v
}

// GetWorst returns the Worst field value if set, zero value otherwise.
func (o *InternationalMarketData) GetWorst() map[string]InternationalMarketReturn {
	if o == nil || o.Worst == nil {
		var ret map[string]InternationalMarketReturn
		return ret
	}
	return *o.Worst
}

// GetWorstOk returns a tuple with the Worst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalMarketData) GetWorstOk() (*map[string]InternationalMarketReturn, bool) {
	if o == nil || o.Worst == nil {
		return nil, false
	}
	return o.Worst, true
}

// HasWorst returns a boolean if a field has been set.
func (o *InternationalMarketData) HasWorst() bool {
	if o != nil && o.Worst != nil {
		return true
	}

	return false
}

// SetWorst gets a reference to the given map[string]InternationalMarketReturn and assigns it to the Worst field.
func (o *InternationalMarketData) SetWorst(v map[string]InternationalMarketReturn) {
	o.Worst = &v
}

func (o InternationalMarketData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Top != nil {
		toSerialize["top"] = o.Top
	}
	if o.Worst != nil {
		toSerialize["worst"] = o.Worst
	}
	return json.Marshal(toSerialize)
}

type NullableInternationalMarketData struct {
	value *InternationalMarketData
	isSet bool
}

func (v NullableInternationalMarketData) Get() *InternationalMarketData {
	return v.value
}

func (v *NullableInternationalMarketData) Set(val *InternationalMarketData) {
	v.value = val
	v.isSet = true
}

func (v NullableInternationalMarketData) IsSet() bool {
	return v.isSet
}

func (v *NullableInternationalMarketData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternationalMarketData(val *InternationalMarketData) *NullableInternationalMarketData {
	return &NullableInternationalMarketData{value: val, isSet: true}
}

func (v NullableInternationalMarketData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternationalMarketData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
