/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Development struct for Development
type Development struct {
	Date   *int64             `json:"date,omitempty"`
	Events *DevelopmentEvents `json:"events,omitempty"`
}

// NewDevelopment instantiates a new Development object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevelopment() *Development {
	this := Development{}
	return &this
}

// NewDevelopmentWithDefaults instantiates a new Development object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevelopmentWithDefaults() *Development {
	this := Development{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Development) GetDate() int64 {
	if o == nil || o.Date == nil {
		var ret int64
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Development) GetDateOk() (*int64, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Development) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given int64 and assigns it to the Date field.
func (o *Development) SetDate(v int64) {
	o.Date = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *Development) GetEvents() DevelopmentEvents {
	if o == nil || o.Events == nil {
		var ret DevelopmentEvents
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Development) GetEventsOk() (*DevelopmentEvents, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *Development) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given DevelopmentEvents and assigns it to the Events field.
func (o *Development) SetEvents(v DevelopmentEvents) {
	o.Events = &v
}

func (o Development) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	return json.Marshal(toSerialize)
}

type NullableDevelopment struct {
	value *Development
	isSet bool
}

func (v NullableDevelopment) Get() *Development {
	return v.value
}

func (v *NullableDevelopment) Set(val *Development) {
	v.value = val
	v.isSet = true
}

func (v NullableDevelopment) IsSet() bool {
	return v.isSet
}

func (v *NullableDevelopment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevelopment(val *Development) *NullableDevelopment {
	return &NullableDevelopment{value: val, isSet: true}
}

func (v NullableDevelopment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevelopment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
