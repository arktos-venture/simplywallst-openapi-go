/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyAnalysisExtendedRawDataMembers struct for CompanyAnalysisExtendedRawDataMembers
type CompanyAnalysisExtendedRawDataMembers struct {
	Board      *map[int64]CompanyAnalysisExtendedRawDataMembersData `json:"board,omitempty"`
	Management *map[int64]CompanyAnalysisExtendedRawDataMembersData `json:"management,omitempty"`
	Leader     *CompanyAnalysisExtendedRawDataMembersLeaderData     `json:"leader,omitempty"`
}

// NewCompanyAnalysisExtendedRawDataMembers instantiates a new CompanyAnalysisExtendedRawDataMembers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyAnalysisExtendedRawDataMembers() *CompanyAnalysisExtendedRawDataMembers {
	this := CompanyAnalysisExtendedRawDataMembers{}
	return &this
}

// NewCompanyAnalysisExtendedRawDataMembersWithDefaults instantiates a new CompanyAnalysisExtendedRawDataMembers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyAnalysisExtendedRawDataMembersWithDefaults() *CompanyAnalysisExtendedRawDataMembers {
	this := CompanyAnalysisExtendedRawDataMembers{}
	return &this
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMembers) GetBoard() map[int64]CompanyAnalysisExtendedRawDataMembersData {
	if o == nil || o.Board == nil {
		var ret map[int64]CompanyAnalysisExtendedRawDataMembersData
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMembers) GetBoardOk() (*map[int64]CompanyAnalysisExtendedRawDataMembersData, bool) {
	if o == nil || o.Board == nil {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMembers) HasBoard() bool {
	if o != nil && o.Board != nil {
		return true
	}

	return false
}

// SetBoard gets a reference to the given map[string]CompanyAnalysisExtendedRawDataMembersData and assigns it to the Board field.
func (o *CompanyAnalysisExtendedRawDataMembers) SetBoard(v map[int64]CompanyAnalysisExtendedRawDataMembersData) {
	o.Board = &v
}

// GetManagement returns the Management field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMembers) GetManagement() map[int64]CompanyAnalysisExtendedRawDataMembersData {
	if o == nil || o.Management == nil {
		var ret map[int64]CompanyAnalysisExtendedRawDataMembersData
		return ret
	}
	return *o.Management
}

// GetManagementOk returns a tuple with the Management field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMembers) GetManagementOk() (*map[int64]CompanyAnalysisExtendedRawDataMembersData, bool) {
	if o == nil || o.Management == nil {
		return nil, false
	}
	return o.Management, true
}

// HasManagement returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMembers) HasManagement() bool {
	if o != nil && o.Management != nil {
		return true
	}

	return false
}

// SetManagement gets a reference to the given map[string]CompanyAnalysisExtendedRawDataMembersData and assigns it to the Management field.
func (o *CompanyAnalysisExtendedRawDataMembers) SetManagement(v map[int64]CompanyAnalysisExtendedRawDataMembersData) {
	o.Management = &v
}

// GetLeader returns the Leader field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMembers) GetLeader() CompanyAnalysisExtendedRawDataMembersLeaderData {
	if o == nil || o.Leader == nil {
		var ret CompanyAnalysisExtendedRawDataMembersLeaderData
		return ret
	}
	return *o.Leader
}

// GetLeaderOk returns a tuple with the Leader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMembers) GetLeaderOk() (*CompanyAnalysisExtendedRawDataMembersLeaderData, bool) {
	if o == nil || o.Leader == nil {
		return nil, false
	}
	return o.Leader, true
}

// HasLeader returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMembers) HasLeader() bool {
	if o != nil && o.Leader != nil {
		return true
	}

	return false
}

// SetLeader gets a reference to the given CompanyAnalysisExtendedRawDataMembersLeaderData and assigns it to the Leader field.
func (o *CompanyAnalysisExtendedRawDataMembers) SetLeader(v CompanyAnalysisExtendedRawDataMembersLeaderData) {
	o.Leader = &v
}

func (o CompanyAnalysisExtendedRawDataMembers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Board != nil {
		toSerialize["board"] = o.Board
	}
	if o.Management != nil {
		toSerialize["management"] = o.Management
	}
	if o.Leader != nil {
		toSerialize["leader"] = o.Leader
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyAnalysisExtendedRawDataMembers struct {
	value *CompanyAnalysisExtendedRawDataMembers
	isSet bool
}

func (v NullableCompanyAnalysisExtendedRawDataMembers) Get() *CompanyAnalysisExtendedRawDataMembers {
	return v.value
}

func (v *NullableCompanyAnalysisExtendedRawDataMembers) Set(val *CompanyAnalysisExtendedRawDataMembers) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyAnalysisExtendedRawDataMembers) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyAnalysisExtendedRawDataMembers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyAnalysisExtendedRawDataMembers(val *CompanyAnalysisExtendedRawDataMembers) *NullableCompanyAnalysisExtendedRawDataMembers {
	return &NullableCompanyAnalysisExtendedRawDataMembers{value: val, isSet: true}
}

func (v NullableCompanyAnalysisExtendedRawDataMembers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyAnalysisExtendedRawDataMembers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
