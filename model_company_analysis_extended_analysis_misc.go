/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyAnalysisExtendedAnalysisMisc struct for CompanyAnalysisExtendedAnalysisMisc
type CompanyAnalysisExtendedAnalysisMisc struct {
	MinPrice                        *float32 `json:"min_price,omitempty"`
	MaxPrice                        *float32 `json:"max_price,omitempty"`
	PriceSpread                     *float32 `json:"price_spread,omitempty"`
	IsVolatile                      *bool    `json:"is_volatile,omitempty"`
	AnalystCount                    *float32 `json:"analyst_count,omitempty"`
	IsFund                          *bool    `json:"is_fund,omitempty"`
	DaysSinceLastTrade              *int32   `json:"days_since_last_trade,omitempty"`
	SharesOutstandingSingleGrowth1y *float32 `json:"shares_outstanding_single_growth_1y,omitempty"`
	SharesOutstandingSingleGrowth5y *float32 `json:"shares_outstanding_single_growth_5y,omitempty"`
}

// NewCompanyAnalysisExtendedAnalysisMisc instantiates a new CompanyAnalysisExtendedAnalysisMisc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyAnalysisExtendedAnalysisMisc() *CompanyAnalysisExtendedAnalysisMisc {
	this := CompanyAnalysisExtendedAnalysisMisc{}
	return &this
}

// NewCompanyAnalysisExtendedAnalysisMiscWithDefaults instantiates a new CompanyAnalysisExtendedAnalysisMisc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyAnalysisExtendedAnalysisMiscWithDefaults() *CompanyAnalysisExtendedAnalysisMisc {
	this := CompanyAnalysisExtendedAnalysisMisc{}
	return &this
}

// GetMinPrice returns the MinPrice field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetMinPrice() float32 {
	if o == nil || o.MinPrice == nil {
		var ret float32
		return ret
	}
	return *o.MinPrice
}

// GetMinPriceOk returns a tuple with the MinPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetMinPriceOk() (*float32, bool) {
	if o == nil || o.MinPrice == nil {
		return nil, false
	}
	return o.MinPrice, true
}

// HasMinPrice returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) HasMinPrice() bool {
	if o != nil && o.MinPrice != nil {
		return true
	}

	return false
}

// SetMinPrice gets a reference to the given float32 and assigns it to the MinPrice field.
func (o *CompanyAnalysisExtendedAnalysisMisc) SetMinPrice(v float32) {
	o.MinPrice = &v
}

// GetMaxPrice returns the MaxPrice field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetMaxPrice() float32 {
	if o == nil || o.MaxPrice == nil {
		var ret float32
		return ret
	}
	return *o.MaxPrice
}

// GetMaxPriceOk returns a tuple with the MaxPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetMaxPriceOk() (*float32, bool) {
	if o == nil || o.MaxPrice == nil {
		return nil, false
	}
	return o.MaxPrice, true
}

// HasMaxPrice returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) HasMaxPrice() bool {
	if o != nil && o.MaxPrice != nil {
		return true
	}

	return false
}

// SetMaxPrice gets a reference to the given float32 and assigns it to the MaxPrice field.
func (o *CompanyAnalysisExtendedAnalysisMisc) SetMaxPrice(v float32) {
	o.MaxPrice = &v
}

// GetPriceSpread returns the PriceSpread field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetPriceSpread() float32 {
	if o == nil || o.PriceSpread == nil {
		var ret float32
		return ret
	}
	return *o.PriceSpread
}

// GetPriceSpreadOk returns a tuple with the PriceSpread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetPriceSpreadOk() (*float32, bool) {
	if o == nil || o.PriceSpread == nil {
		return nil, false
	}
	return o.PriceSpread, true
}

// HasPriceSpread returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) HasPriceSpread() bool {
	if o != nil && o.PriceSpread != nil {
		return true
	}

	return false
}

// SetPriceSpread gets a reference to the given float32 and assigns it to the PriceSpread field.
func (o *CompanyAnalysisExtendedAnalysisMisc) SetPriceSpread(v float32) {
	o.PriceSpread = &v
}

// GetIsVolatile returns the IsVolatile field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetIsVolatile() bool {
	if o == nil || o.IsVolatile == nil {
		var ret bool
		return ret
	}
	return *o.IsVolatile
}

// GetIsVolatileOk returns a tuple with the IsVolatile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetIsVolatileOk() (*bool, bool) {
	if o == nil || o.IsVolatile == nil {
		return nil, false
	}
	return o.IsVolatile, true
}

// HasIsVolatile returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) HasIsVolatile() bool {
	if o != nil && o.IsVolatile != nil {
		return true
	}

	return false
}

// SetIsVolatile gets a reference to the given bool and assigns it to the IsVolatile field.
func (o *CompanyAnalysisExtendedAnalysisMisc) SetIsVolatile(v bool) {
	o.IsVolatile = &v
}

// GetAnalystCount returns the AnalystCount field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetAnalystCount() float32 {
	if o == nil || o.AnalystCount == nil {
		var ret float32
		return ret
	}
	return *o.AnalystCount
}

// GetAnalystCountOk returns a tuple with the AnalystCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetAnalystCountOk() (*float32, bool) {
	if o == nil || o.AnalystCount == nil {
		return nil, false
	}
	return o.AnalystCount, true
}

// HasAnalystCount returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) HasAnalystCount() bool {
	if o != nil && o.AnalystCount != nil {
		return true
	}

	return false
}

// SetAnalystCount gets a reference to the given float32 and assigns it to the AnalystCount field.
func (o *CompanyAnalysisExtendedAnalysisMisc) SetAnalystCount(v float32) {
	o.AnalystCount = &v
}

// GetIsFund returns the IsFund field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetIsFund() bool {
	if o == nil || o.IsFund == nil {
		var ret bool
		return ret
	}
	return *o.IsFund
}

// GetIsFundOk returns a tuple with the IsFund field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetIsFundOk() (*bool, bool) {
	if o == nil || o.IsFund == nil {
		return nil, false
	}
	return o.IsFund, true
}

// HasIsFund returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) HasIsFund() bool {
	if o != nil && o.IsFund != nil {
		return true
	}

	return false
}

// SetIsFund gets a reference to the given bool and assigns it to the IsFund field.
func (o *CompanyAnalysisExtendedAnalysisMisc) SetIsFund(v bool) {
	o.IsFund = &v
}

// GetDaysSinceLastTrade returns the DaysSinceLastTrade field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetDaysSinceLastTrade() int32 {
	if o == nil || o.DaysSinceLastTrade == nil {
		var ret int32
		return ret
	}
	return *o.DaysSinceLastTrade
}

// GetDaysSinceLastTradeOk returns a tuple with the DaysSinceLastTrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetDaysSinceLastTradeOk() (*int32, bool) {
	if o == nil || o.DaysSinceLastTrade == nil {
		return nil, false
	}
	return o.DaysSinceLastTrade, true
}

// HasDaysSinceLastTrade returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) HasDaysSinceLastTrade() bool {
	if o != nil && o.DaysSinceLastTrade != nil {
		return true
	}

	return false
}

// SetDaysSinceLastTrade gets a reference to the given int32 and assigns it to the DaysSinceLastTrade field.
func (o *CompanyAnalysisExtendedAnalysisMisc) SetDaysSinceLastTrade(v int32) {
	o.DaysSinceLastTrade = &v
}

// GetSharesOutstandingSingleGrowth1y returns the SharesOutstandingSingleGrowth1y field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetSharesOutstandingSingleGrowth1y() float32 {
	if o == nil || o.SharesOutstandingSingleGrowth1y == nil {
		var ret float32
		return ret
	}
	return *o.SharesOutstandingSingleGrowth1y
}

// GetSharesOutstandingSingleGrowth1yOk returns a tuple with the SharesOutstandingSingleGrowth1y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetSharesOutstandingSingleGrowth1yOk() (*float32, bool) {
	if o == nil || o.SharesOutstandingSingleGrowth1y == nil {
		return nil, false
	}
	return o.SharesOutstandingSingleGrowth1y, true
}

// HasSharesOutstandingSingleGrowth1y returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) HasSharesOutstandingSingleGrowth1y() bool {
	if o != nil && o.SharesOutstandingSingleGrowth1y != nil {
		return true
	}

	return false
}

// SetSharesOutstandingSingleGrowth1y gets a reference to the given float32 and assigns it to the SharesOutstandingSingleGrowth1y field.
func (o *CompanyAnalysisExtendedAnalysisMisc) SetSharesOutstandingSingleGrowth1y(v float32) {
	o.SharesOutstandingSingleGrowth1y = &v
}

// GetSharesOutstandingSingleGrowth5y returns the SharesOutstandingSingleGrowth5y field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetSharesOutstandingSingleGrowth5y() float32 {
	if o == nil || o.SharesOutstandingSingleGrowth5y == nil {
		var ret float32
		return ret
	}
	return *o.SharesOutstandingSingleGrowth5y
}

// GetSharesOutstandingSingleGrowth5yOk returns a tuple with the SharesOutstandingSingleGrowth5y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) GetSharesOutstandingSingleGrowth5yOk() (*float32, bool) {
	if o == nil || o.SharesOutstandingSingleGrowth5y == nil {
		return nil, false
	}
	return o.SharesOutstandingSingleGrowth5y, true
}

// HasSharesOutstandingSingleGrowth5y returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedAnalysisMisc) HasSharesOutstandingSingleGrowth5y() bool {
	if o != nil && o.SharesOutstandingSingleGrowth5y != nil {
		return true
	}

	return false
}

// SetSharesOutstandingSingleGrowth5y gets a reference to the given float32 and assigns it to the SharesOutstandingSingleGrowth5y field.
func (o *CompanyAnalysisExtendedAnalysisMisc) SetSharesOutstandingSingleGrowth5y(v float32) {
	o.SharesOutstandingSingleGrowth5y = &v
}

func (o CompanyAnalysisExtendedAnalysisMisc) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MinPrice != nil {
		toSerialize["min_price"] = o.MinPrice
	}
	if o.MaxPrice != nil {
		toSerialize["max_price"] = o.MaxPrice
	}
	if o.PriceSpread != nil {
		toSerialize["price_spread"] = o.PriceSpread
	}
	if o.IsVolatile != nil {
		toSerialize["is_volatile"] = o.IsVolatile
	}
	if o.AnalystCount != nil {
		toSerialize["analyst_count"] = o.AnalystCount
	}
	if o.IsFund != nil {
		toSerialize["is_fund"] = o.IsFund
	}
	if o.DaysSinceLastTrade != nil {
		toSerialize["days_since_last_trade"] = o.DaysSinceLastTrade
	}
	if o.SharesOutstandingSingleGrowth1y != nil {
		toSerialize["shares_outstanding_single_growth_1y"] = o.SharesOutstandingSingleGrowth1y
	}
	if o.SharesOutstandingSingleGrowth5y != nil {
		toSerialize["shares_outstanding_single_growth_5y"] = o.SharesOutstandingSingleGrowth5y
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyAnalysisExtendedAnalysisMisc struct {
	value *CompanyAnalysisExtendedAnalysisMisc
	isSet bool
}

func (v NullableCompanyAnalysisExtendedAnalysisMisc) Get() *CompanyAnalysisExtendedAnalysisMisc {
	return v.value
}

func (v *NullableCompanyAnalysisExtendedAnalysisMisc) Set(val *CompanyAnalysisExtendedAnalysisMisc) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyAnalysisExtendedAnalysisMisc) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyAnalysisExtendedAnalysisMisc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyAnalysisExtendedAnalysisMisc(val *CompanyAnalysisExtendedAnalysisMisc) *NullableCompanyAnalysisExtendedAnalysisMisc {
	return &NullableCompanyAnalysisExtendedAnalysisMisc{value: val, isSet: true}
}

func (v NullableCompanyAnalysisExtendedAnalysisMisc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyAnalysisExtendedAnalysisMisc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
