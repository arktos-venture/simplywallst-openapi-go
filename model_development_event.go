/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DevelopmentEvent struct for DevelopmentEvent
type DevelopmentEvent struct {
	CompanyId *string                `json:"company_id,omitempty"`
	Id        *int64                 `json:"id,omitempty"`
	Priority  *bool                  `json:"priority,omitempty"`
	Types     *DevelopmentEventTypes `json:"types,omitempty"`
}

// NewDevelopmentEvent instantiates a new DevelopmentEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevelopmentEvent() *DevelopmentEvent {
	this := DevelopmentEvent{}
	return &this
}

// NewDevelopmentEventWithDefaults instantiates a new DevelopmentEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevelopmentEventWithDefaults() *DevelopmentEvent {
	this := DevelopmentEvent{}
	return &this
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *DevelopmentEvent) GetCompanyId() string {
	if o == nil || o.CompanyId == nil {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevelopmentEvent) GetCompanyIdOk() (*string, bool) {
	if o == nil || o.CompanyId == nil {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *DevelopmentEvent) HasCompanyId() bool {
	if o != nil && o.CompanyId != nil {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *DevelopmentEvent) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DevelopmentEvent) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevelopmentEvent) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DevelopmentEvent) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DevelopmentEvent) SetId(v int64) {
	o.Id = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *DevelopmentEvent) GetPriority() bool {
	if o == nil || o.Priority == nil {
		var ret bool
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevelopmentEvent) GetPriorityOk() (*bool, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *DevelopmentEvent) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given bool and assigns it to the Priority field.
func (o *DevelopmentEvent) SetPriority(v bool) {
	o.Priority = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *DevelopmentEvent) GetTypes() DevelopmentEventTypes {
	if o == nil || o.Types == nil {
		var ret DevelopmentEventTypes
		return ret
	}
	return *o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevelopmentEvent) GetTypesOk() (*DevelopmentEventTypes, bool) {
	if o == nil || o.Types == nil {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *DevelopmentEvent) HasTypes() bool {
	if o != nil && o.Types != nil {
		return true
	}

	return false
}

// SetTypes gets a reference to the given DevelopmentEventTypes and assigns it to the Types field.
func (o *DevelopmentEvent) SetTypes(v DevelopmentEventTypes) {
	o.Types = &v
}

func (o DevelopmentEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompanyId != nil {
		toSerialize["company_id"] = o.CompanyId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.Types != nil {
		toSerialize["types"] = o.Types
	}
	return json.Marshal(toSerialize)
}

type NullableDevelopmentEvent struct {
	value *DevelopmentEvent
	isSet bool
}

func (v NullableDevelopmentEvent) Get() *DevelopmentEvent {
	return v.value
}

func (v *NullableDevelopmentEvent) Set(val *DevelopmentEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableDevelopmentEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableDevelopmentEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevelopmentEvent(val *DevelopmentEvent) *NullableDevelopmentEvent {
	return &NullableDevelopmentEvent{value: val, isSet: true}
}

func (v NullableDevelopmentEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevelopmentEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
