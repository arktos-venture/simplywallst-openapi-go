/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Industry struct for Industry
type Industry struct {
	Id     *int64  `json:"id,omitempty"`
	Type   *string `json:"type,omitempty"`
	Parent *int64  `json:"parent,omitempty"`
}

// NewIndustry instantiates a new Industry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndustry() *Industry {
	this := Industry{}
	return &this
}

// NewIndustryWithDefaults instantiates a new Industry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndustryWithDefaults() *Industry {
	this := Industry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Industry) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Industry) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Industry) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Industry) SetId(v int64) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Industry) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Industry) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Industry) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Industry) SetType(v string) {
	o.Type = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *Industry) GetParent() int64 {
	if o == nil || o.Parent == nil {
		var ret int64
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Industry) GetParentOk() (*int64, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *Industry) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given int64 and assigns it to the Parent field.
func (o *Industry) SetParent(v int64) {
	o.Parent = &v
}

func (o Industry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	return json.Marshal(toSerialize)
}

type NullableIndustry struct {
	value *Industry
	isSet bool
}

func (v NullableIndustry) Get() *Industry {
	return v.value
}

func (v *NullableIndustry) Set(val *Industry) {
	v.value = val
	v.isSet = true
}

func (v NullableIndustry) IsSet() bool {
	return v.isSet
}

func (v *NullableIndustry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndustry(val *Industry) *NullableIndustry {
	return &NullableIndustry{value: val, isSet: true}
}

func (v NullableIndustry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndustry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
