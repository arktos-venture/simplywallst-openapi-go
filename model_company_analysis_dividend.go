/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyAnalysisDividend struct for CompanyAnalysisDividend
type CompanyAnalysisDividend struct {
	Current  *float32 `json:"current,omitempty"`
	Future   *float32 `json:"future,omitempty"`
	Upcoming *bool    `json:"upcoming,omitempty"`
	ExDate   *int64   `json:"ex_date,omitempty"`
}

// NewCompanyAnalysisDividend instantiates a new CompanyAnalysisDividend object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyAnalysisDividend() *CompanyAnalysisDividend {
	this := CompanyAnalysisDividend{}
	return &this
}

// NewCompanyAnalysisDividendWithDefaults instantiates a new CompanyAnalysisDividend object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyAnalysisDividendWithDefaults() *CompanyAnalysisDividend {
	this := CompanyAnalysisDividend{}
	return &this
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *CompanyAnalysisDividend) GetCurrent() float32 {
	if o == nil || o.Current == nil {
		var ret float32
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisDividend) GetCurrentOk() (*float32, bool) {
	if o == nil || o.Current == nil {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *CompanyAnalysisDividend) HasCurrent() bool {
	if o != nil && o.Current != nil {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given float32 and assigns it to the Current field.
func (o *CompanyAnalysisDividend) SetCurrent(v float32) {
	o.Current = &v
}

// GetFuture returns the Future field value if set, zero value otherwise.
func (o *CompanyAnalysisDividend) GetFuture() float32 {
	if o == nil || o.Future == nil {
		var ret float32
		return ret
	}
	return *o.Future
}

// GetFutureOk returns a tuple with the Future field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisDividend) GetFutureOk() (*float32, bool) {
	if o == nil || o.Future == nil {
		return nil, false
	}
	return o.Future, true
}

// HasFuture returns a boolean if a field has been set.
func (o *CompanyAnalysisDividend) HasFuture() bool {
	if o != nil && o.Future != nil {
		return true
	}

	return false
}

// SetFuture gets a reference to the given float32 and assigns it to the Future field.
func (o *CompanyAnalysisDividend) SetFuture(v float32) {
	o.Future = &v
}

// GetUpcoming returns the Upcoming field value if set, zero value otherwise.
func (o *CompanyAnalysisDividend) GetUpcoming() bool {
	if o == nil || o.Upcoming == nil {
		var ret bool
		return ret
	}
	return *o.Upcoming
}

// GetUpcomingOk returns a tuple with the Upcoming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisDividend) GetUpcomingOk() (*bool, bool) {
	if o == nil || o.Upcoming == nil {
		return nil, false
	}
	return o.Upcoming, true
}

// HasUpcoming returns a boolean if a field has been set.
func (o *CompanyAnalysisDividend) HasUpcoming() bool {
	if o != nil && o.Upcoming != nil {
		return true
	}

	return false
}

// SetUpcoming gets a reference to the given bool and assigns it to the Upcoming field.
func (o *CompanyAnalysisDividend) SetUpcoming(v bool) {
	o.Upcoming = &v
}

// GetExDate returns the ExDate field value if set, zero value otherwise.
func (o *CompanyAnalysisDividend) GetExDate() int64 {
	if o == nil || o.ExDate == nil {
		var ret int64
		return ret
	}
	return *o.ExDate
}

// GetExDateOk returns a tuple with the ExDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisDividend) GetExDateOk() (*int64, bool) {
	if o == nil || o.ExDate == nil {
		return nil, false
	}
	return o.ExDate, true
}

// HasExDate returns a boolean if a field has been set.
func (o *CompanyAnalysisDividend) HasExDate() bool {
	if o != nil && o.ExDate != nil {
		return true
	}

	return false
}

// SetExDate gets a reference to the given int64 and assigns it to the ExDate field.
func (o *CompanyAnalysisDividend) SetExDate(v int64) {
	o.ExDate = &v
}

func (o CompanyAnalysisDividend) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Current != nil {
		toSerialize["current"] = o.Current
	}
	if o.Future != nil {
		toSerialize["future"] = o.Future
	}
	if o.Upcoming != nil {
		toSerialize["upcoming"] = o.Upcoming
	}
	if o.ExDate != nil {
		toSerialize["ex_date"] = o.ExDate
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyAnalysisDividend struct {
	value *CompanyAnalysisDividend
	isSet bool
}

func (v NullableCompanyAnalysisDividend) Get() *CompanyAnalysisDividend {
	return v.value
}

func (v *NullableCompanyAnalysisDividend) Set(val *CompanyAnalysisDividend) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyAnalysisDividend) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyAnalysisDividend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyAnalysisDividend(val *CompanyAnalysisDividend) *NullableCompanyAnalysisDividend {
	return &NullableCompanyAnalysisDividend{value: val, isSet: true}
}

func (v NullableCompanyAnalysisDividend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyAnalysisDividend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
