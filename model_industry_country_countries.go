/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IndustryCountryCountries struct for IndustryCountryCountries
type IndustryCountryCountries struct {
	Data *[]Country `json:"data,omitempty"`
}

// NewIndustryCountryCountries instantiates a new IndustryCountryCountries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndustryCountryCountries() *IndustryCountryCountries {
	this := IndustryCountryCountries{}
	return &this
}

// NewIndustryCountryCountriesWithDefaults instantiates a new IndustryCountryCountries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndustryCountryCountriesWithDefaults() *IndustryCountryCountries {
	this := IndustryCountryCountries{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *IndustryCountryCountries) GetData() []Country {
	if o == nil || o.Data == nil {
		var ret []Country
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryCountryCountries) GetDataOk() (*[]Country, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *IndustryCountryCountries) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []Country and assigns it to the Data field.
func (o *IndustryCountryCountries) SetData(v []Country) {
	o.Data = &v
}

func (o IndustryCountryCountries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableIndustryCountryCountries struct {
	value *IndustryCountryCountries
	isSet bool
}

func (v NullableIndustryCountryCountries) Get() *IndustryCountryCountries {
	return v.value
}

func (v *NullableIndustryCountryCountries) Set(val *IndustryCountryCountries) {
	v.value = val
	v.isSet = true
}

func (v NullableIndustryCountryCountries) IsSet() bool {
	return v.isSet
}

func (v *NullableIndustryCountryCountries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndustryCountryCountries(val *IndustryCountryCountries) *NullableIndustryCountryCountries {
	return &NullableIndustryCountryCountries{value: val, isSet: true}
}

func (v NullableIndustryCountryCountries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndustryCountryCountries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
