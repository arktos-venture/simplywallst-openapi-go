/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyDataAnalysis struct for CompanyDataAnalysis
type CompanyDataAnalysis struct {
	Id                *string                      `json:"id,omitempty"`
	SharePrice        *float32                     `json:"share_price,omitempty"`
	MarketCap         *float32                     `json:"market_cap,omitempty"`
	IntrinsicDiscount *float32                     `json:"intrinsic_discount,omitempty"`
	Pe                *float32                     `json:"pe,omitempty"`
	Pb                *float32                     `json:"pb,omitempty"`
	Peg               *float32                     `json:"peg,omitempty"`
	Roe               *float32                     `json:"roe,omitempty"`
	Roa               *float32                     `json:"roa,omitempty"`
	Eps               *float32                     `json:"eps,omitempty"`
	DebtEquity        *float32                     `json:"debt_equity,omitempty"`
	AnalystCount      *float32                     `json:"analyst_count,omitempty"`
	Dividend          *CompanyAnalysisDividend     `json:"dividend,omitempty"`
	Future            *CompanyAnalysisFuture       `json:"future,omitempty"`
	Past              *CompanyAnalysisPast         `json:"past,omitempty"`
	Extended          *CompanyAnalysisExtendedData `json:"extended,omitempty"`
}

// NewCompanyDataAnalysis instantiates a new CompanyDataAnalysis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyDataAnalysis() *CompanyDataAnalysis {
	this := CompanyDataAnalysis{}
	return &this
}

// NewCompanyDataAnalysisWithDefaults instantiates a new CompanyDataAnalysis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyDataAnalysisWithDefaults() *CompanyDataAnalysis {
	this := CompanyDataAnalysis{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CompanyDataAnalysis) SetId(v string) {
	o.Id = &v
}

// GetSharePrice returns the SharePrice field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetSharePrice() float32 {
	if o == nil || o.SharePrice == nil {
		var ret float32
		return ret
	}
	return *o.SharePrice
}

// GetSharePriceOk returns a tuple with the SharePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetSharePriceOk() (*float32, bool) {
	if o == nil || o.SharePrice == nil {
		return nil, false
	}
	return o.SharePrice, true
}

// HasSharePrice returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasSharePrice() bool {
	if o != nil && o.SharePrice != nil {
		return true
	}

	return false
}

// SetSharePrice gets a reference to the given float32 and assigns it to the SharePrice field.
func (o *CompanyDataAnalysis) SetSharePrice(v float32) {
	o.SharePrice = &v
}

// GetMarketCap returns the MarketCap field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetMarketCap() float32 {
	if o == nil || o.MarketCap == nil {
		var ret float32
		return ret
	}
	return *o.MarketCap
}

// GetMarketCapOk returns a tuple with the MarketCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetMarketCapOk() (*float32, bool) {
	if o == nil || o.MarketCap == nil {
		return nil, false
	}
	return o.MarketCap, true
}

// HasMarketCap returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasMarketCap() bool {
	if o != nil && o.MarketCap != nil {
		return true
	}

	return false
}

// SetMarketCap gets a reference to the given float32 and assigns it to the MarketCap field.
func (o *CompanyDataAnalysis) SetMarketCap(v float32) {
	o.MarketCap = &v
}

// GetIntrinsicDiscount returns the IntrinsicDiscount field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetIntrinsicDiscount() float32 {
	if o == nil || o.IntrinsicDiscount == nil {
		var ret float32
		return ret
	}
	return *o.IntrinsicDiscount
}

// GetIntrinsicDiscountOk returns a tuple with the IntrinsicDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetIntrinsicDiscountOk() (*float32, bool) {
	if o == nil || o.IntrinsicDiscount == nil {
		return nil, false
	}
	return o.IntrinsicDiscount, true
}

// HasIntrinsicDiscount returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasIntrinsicDiscount() bool {
	if o != nil && o.IntrinsicDiscount != nil {
		return true
	}

	return false
}

// SetIntrinsicDiscount gets a reference to the given float32 and assigns it to the IntrinsicDiscount field.
func (o *CompanyDataAnalysis) SetIntrinsicDiscount(v float32) {
	o.IntrinsicDiscount = &v
}

// GetPe returns the Pe field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetPe() float32 {
	if o == nil || o.Pe == nil {
		var ret float32
		return ret
	}
	return *o.Pe
}

// GetPeOk returns a tuple with the Pe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetPeOk() (*float32, bool) {
	if o == nil || o.Pe == nil {
		return nil, false
	}
	return o.Pe, true
}

// HasPe returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasPe() bool {
	if o != nil && o.Pe != nil {
		return true
	}

	return false
}

// SetPe gets a reference to the given float32 and assigns it to the Pe field.
func (o *CompanyDataAnalysis) SetPe(v float32) {
	o.Pe = &v
}

// GetPb returns the Pb field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetPb() float32 {
	if o == nil || o.Pb == nil {
		var ret float32
		return ret
	}
	return *o.Pb
}

// GetPbOk returns a tuple with the Pb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetPbOk() (*float32, bool) {
	if o == nil || o.Pb == nil {
		return nil, false
	}
	return o.Pb, true
}

// HasPb returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasPb() bool {
	if o != nil && o.Pb != nil {
		return true
	}

	return false
}

// SetPb gets a reference to the given float32 and assigns it to the Pb field.
func (o *CompanyDataAnalysis) SetPb(v float32) {
	o.Pb = &v
}

// GetPeg returns the Peg field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetPeg() float32 {
	if o == nil || o.Peg == nil {
		var ret float32
		return ret
	}
	return *o.Peg
}

// GetPegOk returns a tuple with the Peg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetPegOk() (*float32, bool) {
	if o == nil || o.Peg == nil {
		return nil, false
	}
	return o.Peg, true
}

// HasPeg returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasPeg() bool {
	if o != nil && o.Peg != nil {
		return true
	}

	return false
}

// SetPeg gets a reference to the given float32 and assigns it to the Peg field.
func (o *CompanyDataAnalysis) SetPeg(v float32) {
	o.Peg = &v
}

// GetRoe returns the Roe field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetRoe() float32 {
	if o == nil || o.Roe == nil {
		var ret float32
		return ret
	}
	return *o.Roe
}

// GetRoeOk returns a tuple with the Roe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetRoeOk() (*float32, bool) {
	if o == nil || o.Roe == nil {
		return nil, false
	}
	return o.Roe, true
}

// HasRoe returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasRoe() bool {
	if o != nil && o.Roe != nil {
		return true
	}

	return false
}

// SetRoe gets a reference to the given float32 and assigns it to the Roe field.
func (o *CompanyDataAnalysis) SetRoe(v float32) {
	o.Roe = &v
}

// GetRoa returns the Roa field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetRoa() float32 {
	if o == nil || o.Roa == nil {
		var ret float32
		return ret
	}
	return *o.Roa
}

// GetRoaOk returns a tuple with the Roa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetRoaOk() (*float32, bool) {
	if o == nil || o.Roa == nil {
		return nil, false
	}
	return o.Roa, true
}

// HasRoa returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasRoa() bool {
	if o != nil && o.Roa != nil {
		return true
	}

	return false
}

// SetRoa gets a reference to the given float32 and assigns it to the Roa field.
func (o *CompanyDataAnalysis) SetRoa(v float32) {
	o.Roa = &v
}

// GetEps returns the Eps field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetEps() float32 {
	if o == nil || o.Eps == nil {
		var ret float32
		return ret
	}
	return *o.Eps
}

// GetEpsOk returns a tuple with the Eps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetEpsOk() (*float32, bool) {
	if o == nil || o.Eps == nil {
		return nil, false
	}
	return o.Eps, true
}

// HasEps returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasEps() bool {
	if o != nil && o.Eps != nil {
		return true
	}

	return false
}

// SetEps gets a reference to the given float32 and assigns it to the Eps field.
func (o *CompanyDataAnalysis) SetEps(v float32) {
	o.Eps = &v
}

// GetDebtEquity returns the DebtEquity field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetDebtEquity() float32 {
	if o == nil || o.DebtEquity == nil {
		var ret float32
		return ret
	}
	return *o.DebtEquity
}

// GetDebtEquityOk returns a tuple with the DebtEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetDebtEquityOk() (*float32, bool) {
	if o == nil || o.DebtEquity == nil {
		return nil, false
	}
	return o.DebtEquity, true
}

// HasDebtEquity returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasDebtEquity() bool {
	if o != nil && o.DebtEquity != nil {
		return true
	}

	return false
}

// SetDebtEquity gets a reference to the given float32 and assigns it to the DebtEquity field.
func (o *CompanyDataAnalysis) SetDebtEquity(v float32) {
	o.DebtEquity = &v
}

// GetAnalystCount returns the AnalystCount field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetAnalystCount() float32 {
	if o == nil || o.AnalystCount == nil {
		var ret float32
		return ret
	}
	return *o.AnalystCount
}

// GetAnalystCountOk returns a tuple with the AnalystCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetAnalystCountOk() (*float32, bool) {
	if o == nil || o.AnalystCount == nil {
		return nil, false
	}
	return o.AnalystCount, true
}

// HasAnalystCount returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasAnalystCount() bool {
	if o != nil && o.AnalystCount != nil {
		return true
	}

	return false
}

// SetAnalystCount gets a reference to the given float32 and assigns it to the AnalystCount field.
func (o *CompanyDataAnalysis) SetAnalystCount(v float32) {
	o.AnalystCount = &v
}

// GetDividend returns the Dividend field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetDividend() CompanyAnalysisDividend {
	if o == nil || o.Dividend == nil {
		var ret CompanyAnalysisDividend
		return ret
	}
	return *o.Dividend
}

// GetDividendOk returns a tuple with the Dividend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetDividendOk() (*CompanyAnalysisDividend, bool) {
	if o == nil || o.Dividend == nil {
		return nil, false
	}
	return o.Dividend, true
}

// HasDividend returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasDividend() bool {
	if o != nil && o.Dividend != nil {
		return true
	}

	return false
}

// SetDividend gets a reference to the given CompanyAnalysisDividend and assigns it to the Dividend field.
func (o *CompanyDataAnalysis) SetDividend(v CompanyAnalysisDividend) {
	o.Dividend = &v
}

// GetFuture returns the Future field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetFuture() CompanyAnalysisFuture {
	if o == nil || o.Future == nil {
		var ret CompanyAnalysisFuture
		return ret
	}
	return *o.Future
}

// GetFutureOk returns a tuple with the Future field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetFutureOk() (*CompanyAnalysisFuture, bool) {
	if o == nil || o.Future == nil {
		return nil, false
	}
	return o.Future, true
}

// HasFuture returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasFuture() bool {
	if o != nil && o.Future != nil {
		return true
	}

	return false
}

// SetFuture gets a reference to the given CompanyAnalysisFuture and assigns it to the Future field.
func (o *CompanyDataAnalysis) SetFuture(v CompanyAnalysisFuture) {
	o.Future = &v
}

// GetPast returns the Past field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetPast() CompanyAnalysisPast {
	if o == nil || o.Past == nil {
		var ret CompanyAnalysisPast
		return ret
	}
	return *o.Past
}

// GetPastOk returns a tuple with the Past field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetPastOk() (*CompanyAnalysisPast, bool) {
	if o == nil || o.Past == nil {
		return nil, false
	}
	return o.Past, true
}

// HasPast returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasPast() bool {
	if o != nil && o.Past != nil {
		return true
	}

	return false
}

// SetPast gets a reference to the given CompanyAnalysisPast and assigns it to the Past field.
func (o *CompanyDataAnalysis) SetPast(v CompanyAnalysisPast) {
	o.Past = &v
}

// GetExtended returns the Extended field value if set, zero value otherwise.
func (o *CompanyDataAnalysis) GetExtended() CompanyAnalysisExtendedData {
	if o == nil || o.Extended == nil {
		var ret CompanyAnalysisExtendedData
		return ret
	}
	return *o.Extended
}

// GetExtendedOk returns a tuple with the Extended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataAnalysis) GetExtendedOk() (*CompanyAnalysisExtendedData, bool) {
	if o == nil || o.Extended == nil {
		return nil, false
	}
	return o.Extended, true
}

// HasExtended returns a boolean if a field has been set.
func (o *CompanyDataAnalysis) HasExtended() bool {
	if o != nil && o.Extended != nil {
		return true
	}

	return false
}

// SetExtended gets a reference to the given CompanyAnalysisExtendedData and assigns it to the Extended field.
func (o *CompanyDataAnalysis) SetExtended(v CompanyAnalysisExtendedData) {
	o.Extended = &v
}

func (o CompanyDataAnalysis) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.SharePrice != nil {
		toSerialize["share_price"] = o.SharePrice
	}
	if o.MarketCap != nil {
		toSerialize["market_cap"] = o.MarketCap
	}
	if o.IntrinsicDiscount != nil {
		toSerialize["intrinsic_discount"] = o.IntrinsicDiscount
	}
	if o.Pe != nil {
		toSerialize["pe"] = o.Pe
	}
	if o.Pb != nil {
		toSerialize["pb"] = o.Pb
	}
	if o.Peg != nil {
		toSerialize["peg"] = o.Peg
	}
	if o.Roe != nil {
		toSerialize["roe"] = o.Roe
	}
	if o.Roa != nil {
		toSerialize["roa"] = o.Roa
	}
	if o.Eps != nil {
		toSerialize["eps"] = o.Eps
	}
	if o.DebtEquity != nil {
		toSerialize["debt_equity"] = o.DebtEquity
	}
	if o.AnalystCount != nil {
		toSerialize["analyst_count"] = o.AnalystCount
	}
	if o.Dividend != nil {
		toSerialize["dividend"] = o.Dividend
	}
	if o.Future != nil {
		toSerialize["future"] = o.Future
	}
	if o.Past != nil {
		toSerialize["past"] = o.Past
	}
	if o.Extended != nil {
		toSerialize["extended"] = o.Extended
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyDataAnalysis struct {
	value *CompanyDataAnalysis
	isSet bool
}

func (v NullableCompanyDataAnalysis) Get() *CompanyDataAnalysis {
	return v.value
}

func (v *NullableCompanyDataAnalysis) Set(val *CompanyDataAnalysis) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyDataAnalysis) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyDataAnalysis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyDataAnalysis(val *CompanyDataAnalysis) *NullableCompanyDataAnalysis {
	return &NullableCompanyDataAnalysis{value: val, isSet: true}
}

func (v NullableCompanyDataAnalysis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyDataAnalysis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
