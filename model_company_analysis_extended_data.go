/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyAnalysisExtendedData struct for CompanyAnalysisExtendedData
type CompanyAnalysisExtendedData struct {
	Data *CompanyAnalysisExtended `json:"data,omitempty"`
}

// NewCompanyAnalysisExtendedData instantiates a new CompanyAnalysisExtendedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyAnalysisExtendedData() *CompanyAnalysisExtendedData {
	this := CompanyAnalysisExtendedData{}
	return &this
}

// NewCompanyAnalysisExtendedDataWithDefaults instantiates a new CompanyAnalysisExtendedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyAnalysisExtendedDataWithDefaults() *CompanyAnalysisExtendedData {
	this := CompanyAnalysisExtendedData{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedData) GetData() CompanyAnalysisExtended {
	if o == nil || o.Data == nil {
		var ret CompanyAnalysisExtended
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedData) GetDataOk() (*CompanyAnalysisExtended, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedData) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given CompanyAnalysisExtended and assigns it to the Data field.
func (o *CompanyAnalysisExtendedData) SetData(v CompanyAnalysisExtended) {
	o.Data = &v
}

func (o CompanyAnalysisExtendedData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyAnalysisExtendedData struct {
	value *CompanyAnalysisExtendedData
	isSet bool
}

func (v NullableCompanyAnalysisExtendedData) Get() *CompanyAnalysisExtendedData {
	return v.value
}

func (v *NullableCompanyAnalysisExtendedData) Set(val *CompanyAnalysisExtendedData) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyAnalysisExtendedData) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyAnalysisExtendedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyAnalysisExtendedData(val *CompanyAnalysisExtendedData) *NullableCompanyAnalysisExtendedData {
	return &NullableCompanyAnalysisExtendedData{value: val, isSet: true}
}

func (v NullableCompanyAnalysisExtendedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyAnalysisExtendedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
