/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyAnalysisExtendedIndustryAverages struct for CompanyAnalysisExtendedIndustryAverages
type CompanyAnalysisExtendedIndustryAverages struct {
	IndustryId                   *int64                                      `json:"industryId,omitempty"`
	CountryIso                   *string                                     `json:"countryIso,omitempty"`
	Name                         *string                                     `json:"name,omitempty"`
	ValueScore                   *float32                                    `json:"valueScore,omitempty"`
	DividendsScore               *float32                                    `json:"dividendsScore,omitempty"`
	FuturePerformanceScore       *float32                                    `json:"futurePerformanceScore,omitempty"`
	HealthScore                  *float32                                    `json:"healthScore,omitempty"`
	PastPerformanceScore         *float32                                    `json:"pastPerformanceScore,omitempty"`
	TotalScore                   *float32                                    `json:"totalScore,omitempty"`
	SharePrice                   *float32                                    `json:"sharePrice,omitempty"`
	MarketCap                    *float32                                    `json:"marketCap,omitempty"`
	IntrinsicDiscount            *float32                                    `json:"intrinsicDiscount,omitempty"`
	AnalystCount                 *int32                                      `json:"analystCount,omitempty"`
	PE                           *float32                                    `json:"PE,omitempty"`
	PB                           *float32                                    `json:"PB,omitempty"`
	PEG                          *float32                                    `json:"PEG,omitempty"`
	FutureOneYearGrowth          *float32                                    `json:"futureOneYearGrowth,omitempty"`
	FutureThreeYearGrowth        *float32                                    `json:"futureThreeYearGrowth,omitempty"`
	HistoricalDividendYield      *float32                                    `json:"historical_dividend_yield,omitempty"`
	FutureOneYearROE             NullableFloat32                             `json:"futureOneYearROE,omitempty"`
	FutureThreeYearROE           NullableFloat32                             `json:"futureThreeYearROE,omitempty"`
	PastOneYearGrowth            *float32                                    `json:"pastOneYearGrowth,omitempty"`
	PastFiveYearGrowth           *float32                                    `json:"pastFiveYearGrowth,omitempty"`
	ROE                          *float32                                    `json:"ROE,omitempty"`
	ROA                          *float32                                    `json:"ROA,omitempty"`
	DividendYield                *float32                                    `json:"dividendYield,omitempty"`
	FutureDividendYield          *float32                                    `json:"futureDividendYield,omitempty"`
	PayoutRatio                  NullableFloat32                             `json:"payoutRatio,omitempty"`
	EPS                          *float32                                    `json:"EPS,omitempty"`
	InsiderBuying                *float32                                    `json:"insiderBuying,omitempty"`
	DebtEquity                   *float32                                    `json:"debtEquity,omitempty"`
	LeveredBeta                  *float32                                    `json:"leveredBeta,omitempty"`
	UnleveredBeta                *float32                                    `json:"unleveredBeta,omitempty"`
	TotalBaseCount               *int32                                      `json:"totalBaseCount,omitempty"`
	ProfitableCount              *int32                                      `json:"profitableCount,omitempty"`
	AnalystCoverageCount         *int32                                      `json:"analystCoverageCount,omitempty"`
	DividendCount                *int32                                      `json:"dividendCount,omitempty"`
	BetaCount                    *int32                                      `json:"betaCount,omitempty"`
	EarningsPerShareGrowthAnnual *float32                                    `json:"earningsPerShareGrowthAnnual,omitempty"`
	NetIncomeGrowthAnnual        *float32                                    `json:"netIncomeGrowthAnnual,omitempty"`
	CashOpsGrowthAnnual          *float32                                    `json:"cashOpsGrowthAnnual,omitempty"`
	RevenueGrowthAnnual          *float32                                    `json:"revenueGrowthAnnual,omitempty"`
	LeveredBetaMedian            *float32                                    `json:"leveredBetaMedian,omitempty"`
	BaseSource                   *string                                     `json:"baseSource,omitempty"`
	ProfitableSource             *string                                     `json:"profitableSource,omitempty"`
	AnalystSource                *string                                     `json:"analystSource,omitempty"`
	DividendSource               *string                                     `json:"dividendSource,omitempty"`
	BetaSource                   *string                                     `json:"betaSource,omitempty"`
	All                          *CompanyAnalysisExtendedIndustryAveragesAll `json:"all,omitempty"`
}

// NewCompanyAnalysisExtendedIndustryAverages instantiates a new CompanyAnalysisExtendedIndustryAverages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyAnalysisExtendedIndustryAverages() *CompanyAnalysisExtendedIndustryAverages {
	this := CompanyAnalysisExtendedIndustryAverages{}
	return &this
}

// NewCompanyAnalysisExtendedIndustryAveragesWithDefaults instantiates a new CompanyAnalysisExtendedIndustryAverages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyAnalysisExtendedIndustryAveragesWithDefaults() *CompanyAnalysisExtendedIndustryAverages {
	this := CompanyAnalysisExtendedIndustryAverages{}
	return &this
}

// GetIndustryId returns the IndustryId field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetIndustryId() int64 {
	if o == nil || o.IndustryId == nil {
		var ret int64
		return ret
	}
	return *o.IndustryId
}

// GetIndustryIdOk returns a tuple with the IndustryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetIndustryIdOk() (*int64, bool) {
	if o == nil || o.IndustryId == nil {
		return nil, false
	}
	return o.IndustryId, true
}

// HasIndustryId returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasIndustryId() bool {
	if o != nil && o.IndustryId != nil {
		return true
	}

	return false
}

// SetIndustryId gets a reference to the given int64 and assigns it to the IndustryId field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetIndustryId(v int64) {
	o.IndustryId = &v
}

// GetCountryIso returns the CountryIso field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetCountryIso() string {
	if o == nil || o.CountryIso == nil {
		var ret string
		return ret
	}
	return *o.CountryIso
}

// GetCountryIsoOk returns a tuple with the CountryIso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetCountryIsoOk() (*string, bool) {
	if o == nil || o.CountryIso == nil {
		return nil, false
	}
	return o.CountryIso, true
}

// HasCountryIso returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasCountryIso() bool {
	if o != nil && o.CountryIso != nil {
		return true
	}

	return false
}

// SetCountryIso gets a reference to the given string and assigns it to the CountryIso field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetCountryIso(v string) {
	o.CountryIso = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetName(v string) {
	o.Name = &v
}

// GetValueScore returns the ValueScore field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetValueScore() float32 {
	if o == nil || o.ValueScore == nil {
		var ret float32
		return ret
	}
	return *o.ValueScore
}

// GetValueScoreOk returns a tuple with the ValueScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetValueScoreOk() (*float32, bool) {
	if o == nil || o.ValueScore == nil {
		return nil, false
	}
	return o.ValueScore, true
}

// HasValueScore returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasValueScore() bool {
	if o != nil && o.ValueScore != nil {
		return true
	}

	return false
}

// SetValueScore gets a reference to the given float32 and assigns it to the ValueScore field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetValueScore(v float32) {
	o.ValueScore = &v
}

// GetDividendsScore returns the DividendsScore field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetDividendsScore() float32 {
	if o == nil || o.DividendsScore == nil {
		var ret float32
		return ret
	}
	return *o.DividendsScore
}

// GetDividendsScoreOk returns a tuple with the DividendsScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetDividendsScoreOk() (*float32, bool) {
	if o == nil || o.DividendsScore == nil {
		return nil, false
	}
	return o.DividendsScore, true
}

// HasDividendsScore returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasDividendsScore() bool {
	if o != nil && o.DividendsScore != nil {
		return true
	}

	return false
}

// SetDividendsScore gets a reference to the given float32 and assigns it to the DividendsScore field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetDividendsScore(v float32) {
	o.DividendsScore = &v
}

// GetFuturePerformanceScore returns the FuturePerformanceScore field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetFuturePerformanceScore() float32 {
	if o == nil || o.FuturePerformanceScore == nil {
		var ret float32
		return ret
	}
	return *o.FuturePerformanceScore
}

// GetFuturePerformanceScoreOk returns a tuple with the FuturePerformanceScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetFuturePerformanceScoreOk() (*float32, bool) {
	if o == nil || o.FuturePerformanceScore == nil {
		return nil, false
	}
	return o.FuturePerformanceScore, true
}

// HasFuturePerformanceScore returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasFuturePerformanceScore() bool {
	if o != nil && o.FuturePerformanceScore != nil {
		return true
	}

	return false
}

// SetFuturePerformanceScore gets a reference to the given float32 and assigns it to the FuturePerformanceScore field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetFuturePerformanceScore(v float32) {
	o.FuturePerformanceScore = &v
}

// GetHealthScore returns the HealthScore field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetHealthScore() float32 {
	if o == nil || o.HealthScore == nil {
		var ret float32
		return ret
	}
	return *o.HealthScore
}

// GetHealthScoreOk returns a tuple with the HealthScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetHealthScoreOk() (*float32, bool) {
	if o == nil || o.HealthScore == nil {
		return nil, false
	}
	return o.HealthScore, true
}

// HasHealthScore returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasHealthScore() bool {
	if o != nil && o.HealthScore != nil {
		return true
	}

	return false
}

// SetHealthScore gets a reference to the given float32 and assigns it to the HealthScore field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetHealthScore(v float32) {
	o.HealthScore = &v
}

// GetPastPerformanceScore returns the PastPerformanceScore field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetPastPerformanceScore() float32 {
	if o == nil || o.PastPerformanceScore == nil {
		var ret float32
		return ret
	}
	return *o.PastPerformanceScore
}

// GetPastPerformanceScoreOk returns a tuple with the PastPerformanceScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetPastPerformanceScoreOk() (*float32, bool) {
	if o == nil || o.PastPerformanceScore == nil {
		return nil, false
	}
	return o.PastPerformanceScore, true
}

// HasPastPerformanceScore returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasPastPerformanceScore() bool {
	if o != nil && o.PastPerformanceScore != nil {
		return true
	}

	return false
}

// SetPastPerformanceScore gets a reference to the given float32 and assigns it to the PastPerformanceScore field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetPastPerformanceScore(v float32) {
	o.PastPerformanceScore = &v
}

// GetTotalScore returns the TotalScore field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetTotalScore() float32 {
	if o == nil || o.TotalScore == nil {
		var ret float32
		return ret
	}
	return *o.TotalScore
}

// GetTotalScoreOk returns a tuple with the TotalScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetTotalScoreOk() (*float32, bool) {
	if o == nil || o.TotalScore == nil {
		return nil, false
	}
	return o.TotalScore, true
}

// HasTotalScore returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasTotalScore() bool {
	if o != nil && o.TotalScore != nil {
		return true
	}

	return false
}

// SetTotalScore gets a reference to the given float32 and assigns it to the TotalScore field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetTotalScore(v float32) {
	o.TotalScore = &v
}

// GetSharePrice returns the SharePrice field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetSharePrice() float32 {
	if o == nil || o.SharePrice == nil {
		var ret float32
		return ret
	}
	return *o.SharePrice
}

// GetSharePriceOk returns a tuple with the SharePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetSharePriceOk() (*float32, bool) {
	if o == nil || o.SharePrice == nil {
		return nil, false
	}
	return o.SharePrice, true
}

// HasSharePrice returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasSharePrice() bool {
	if o != nil && o.SharePrice != nil {
		return true
	}

	return false
}

// SetSharePrice gets a reference to the given float32 and assigns it to the SharePrice field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetSharePrice(v float32) {
	o.SharePrice = &v
}

// GetMarketCap returns the MarketCap field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetMarketCap() float32 {
	if o == nil || o.MarketCap == nil {
		var ret float32
		return ret
	}
	return *o.MarketCap
}

// GetMarketCapOk returns a tuple with the MarketCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetMarketCapOk() (*float32, bool) {
	if o == nil || o.MarketCap == nil {
		return nil, false
	}
	return o.MarketCap, true
}

// HasMarketCap returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasMarketCap() bool {
	if o != nil && o.MarketCap != nil {
		return true
	}

	return false
}

// SetMarketCap gets a reference to the given float32 and assigns it to the MarketCap field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetMarketCap(v float32) {
	o.MarketCap = &v
}

// GetIntrinsicDiscount returns the IntrinsicDiscount field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetIntrinsicDiscount() float32 {
	if o == nil || o.IntrinsicDiscount == nil {
		var ret float32
		return ret
	}
	return *o.IntrinsicDiscount
}

// GetIntrinsicDiscountOk returns a tuple with the IntrinsicDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetIntrinsicDiscountOk() (*float32, bool) {
	if o == nil || o.IntrinsicDiscount == nil {
		return nil, false
	}
	return o.IntrinsicDiscount, true
}

// HasIntrinsicDiscount returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasIntrinsicDiscount() bool {
	if o != nil && o.IntrinsicDiscount != nil {
		return true
	}

	return false
}

// SetIntrinsicDiscount gets a reference to the given float32 and assigns it to the IntrinsicDiscount field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetIntrinsicDiscount(v float32) {
	o.IntrinsicDiscount = &v
}

// GetAnalystCount returns the AnalystCount field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetAnalystCount() int32 {
	if o == nil || o.AnalystCount == nil {
		var ret int32
		return ret
	}
	return *o.AnalystCount
}

// GetAnalystCountOk returns a tuple with the AnalystCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetAnalystCountOk() (*int32, bool) {
	if o == nil || o.AnalystCount == nil {
		return nil, false
	}
	return o.AnalystCount, true
}

// HasAnalystCount returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasAnalystCount() bool {
	if o != nil && o.AnalystCount != nil {
		return true
	}

	return false
}

// SetAnalystCount gets a reference to the given int32 and assigns it to the AnalystCount field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetAnalystCount(v int32) {
	o.AnalystCount = &v
}

// GetPE returns the PE field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetPE() float32 {
	if o == nil || o.PE == nil {
		var ret float32
		return ret
	}
	return *o.PE
}

// GetPEOk returns a tuple with the PE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetPEOk() (*float32, bool) {
	if o == nil || o.PE == nil {
		return nil, false
	}
	return o.PE, true
}

// HasPE returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasPE() bool {
	if o != nil && o.PE != nil {
		return true
	}

	return false
}

// SetPE gets a reference to the given float32 and assigns it to the PE field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetPE(v float32) {
	o.PE = &v
}

// GetPB returns the PB field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetPB() float32 {
	if o == nil || o.PB == nil {
		var ret float32
		return ret
	}
	return *o.PB
}

// GetPBOk returns a tuple with the PB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetPBOk() (*float32, bool) {
	if o == nil || o.PB == nil {
		return nil, false
	}
	return o.PB, true
}

// HasPB returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasPB() bool {
	if o != nil && o.PB != nil {
		return true
	}

	return false
}

// SetPB gets a reference to the given float32 and assigns it to the PB field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetPB(v float32) {
	o.PB = &v
}

// GetPEG returns the PEG field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetPEG() float32 {
	if o == nil || o.PEG == nil {
		var ret float32
		return ret
	}
	return *o.PEG
}

// GetPEGOk returns a tuple with the PEG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetPEGOk() (*float32, bool) {
	if o == nil || o.PEG == nil {
		return nil, false
	}
	return o.PEG, true
}

// HasPEG returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasPEG() bool {
	if o != nil && o.PEG != nil {
		return true
	}

	return false
}

// SetPEG gets a reference to the given float32 and assigns it to the PEG field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetPEG(v float32) {
	o.PEG = &v
}

// GetFutureOneYearGrowth returns the FutureOneYearGrowth field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetFutureOneYearGrowth() float32 {
	if o == nil || o.FutureOneYearGrowth == nil {
		var ret float32
		return ret
	}
	return *o.FutureOneYearGrowth
}

// GetFutureOneYearGrowthOk returns a tuple with the FutureOneYearGrowth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetFutureOneYearGrowthOk() (*float32, bool) {
	if o == nil || o.FutureOneYearGrowth == nil {
		return nil, false
	}
	return o.FutureOneYearGrowth, true
}

// HasFutureOneYearGrowth returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasFutureOneYearGrowth() bool {
	if o != nil && o.FutureOneYearGrowth != nil {
		return true
	}

	return false
}

// SetFutureOneYearGrowth gets a reference to the given float32 and assigns it to the FutureOneYearGrowth field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetFutureOneYearGrowth(v float32) {
	o.FutureOneYearGrowth = &v
}

// GetFutureThreeYearGrowth returns the FutureThreeYearGrowth field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetFutureThreeYearGrowth() float32 {
	if o == nil || o.FutureThreeYearGrowth == nil {
		var ret float32
		return ret
	}
	return *o.FutureThreeYearGrowth
}

// GetFutureThreeYearGrowthOk returns a tuple with the FutureThreeYearGrowth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetFutureThreeYearGrowthOk() (*float32, bool) {
	if o == nil || o.FutureThreeYearGrowth == nil {
		return nil, false
	}
	return o.FutureThreeYearGrowth, true
}

// HasFutureThreeYearGrowth returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasFutureThreeYearGrowth() bool {
	if o != nil && o.FutureThreeYearGrowth != nil {
		return true
	}

	return false
}

// SetFutureThreeYearGrowth gets a reference to the given float32 and assigns it to the FutureThreeYearGrowth field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetFutureThreeYearGrowth(v float32) {
	o.FutureThreeYearGrowth = &v
}

// GetHistoricalDividendYield returns the HistoricalDividendYield field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetHistoricalDividendYield() float32 {
	if o == nil || o.HistoricalDividendYield == nil {
		var ret float32
		return ret
	}
	return *o.HistoricalDividendYield
}

// GetHistoricalDividendYieldOk returns a tuple with the HistoricalDividendYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetHistoricalDividendYieldOk() (*float32, bool) {
	if o == nil || o.HistoricalDividendYield == nil {
		return nil, false
	}
	return o.HistoricalDividendYield, true
}

// HasHistoricalDividendYield returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasHistoricalDividendYield() bool {
	if o != nil && o.HistoricalDividendYield != nil {
		return true
	}

	return false
}

// SetHistoricalDividendYield gets a reference to the given float32 and assigns it to the HistoricalDividendYield field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetHistoricalDividendYield(v float32) {
	o.HistoricalDividendYield = &v
}

// GetFutureOneYearROE returns the FutureOneYearROE field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyAnalysisExtendedIndustryAverages) GetFutureOneYearROE() float32 {
	if o == nil || o.FutureOneYearROE.Get() == nil {
		var ret float32
		return ret
	}
	return *o.FutureOneYearROE.Get()
}

// GetFutureOneYearROEOk returns a tuple with the FutureOneYearROE field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyAnalysisExtendedIndustryAverages) GetFutureOneYearROEOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FutureOneYearROE.Get(), o.FutureOneYearROE.IsSet()
}

// HasFutureOneYearROE returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasFutureOneYearROE() bool {
	if o != nil && o.FutureOneYearROE.IsSet() {
		return true
	}

	return false
}

// SetFutureOneYearROE gets a reference to the given NullableFloat32 and assigns it to the FutureOneYearROE field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetFutureOneYearROE(v float32) {
	o.FutureOneYearROE.Set(&v)
}

// SetFutureOneYearROENil sets the value for FutureOneYearROE to be an explicit nil
func (o *CompanyAnalysisExtendedIndustryAverages) SetFutureOneYearROENil() {
	o.FutureOneYearROE.Set(nil)
}

// UnsetFutureOneYearROE ensures that no value is present for FutureOneYearROE, not even an explicit nil
func (o *CompanyAnalysisExtendedIndustryAverages) UnsetFutureOneYearROE() {
	o.FutureOneYearROE.Unset()
}

// GetFutureThreeYearROE returns the FutureThreeYearROE field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyAnalysisExtendedIndustryAverages) GetFutureThreeYearROE() float32 {
	if o == nil || o.FutureThreeYearROE.Get() == nil {
		var ret float32
		return ret
	}
	return *o.FutureThreeYearROE.Get()
}

// GetFutureThreeYearROEOk returns a tuple with the FutureThreeYearROE field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyAnalysisExtendedIndustryAverages) GetFutureThreeYearROEOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FutureThreeYearROE.Get(), o.FutureThreeYearROE.IsSet()
}

// HasFutureThreeYearROE returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasFutureThreeYearROE() bool {
	if o != nil && o.FutureThreeYearROE.IsSet() {
		return true
	}

	return false
}

// SetFutureThreeYearROE gets a reference to the given NullableFloat32 and assigns it to the FutureThreeYearROE field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetFutureThreeYearROE(v float32) {
	o.FutureThreeYearROE.Set(&v)
}

// SetFutureThreeYearROENil sets the value for FutureThreeYearROE to be an explicit nil
func (o *CompanyAnalysisExtendedIndustryAverages) SetFutureThreeYearROENil() {
	o.FutureThreeYearROE.Set(nil)
}

// UnsetFutureThreeYearROE ensures that no value is present for FutureThreeYearROE, not even an explicit nil
func (o *CompanyAnalysisExtendedIndustryAverages) UnsetFutureThreeYearROE() {
	o.FutureThreeYearROE.Unset()
}

// GetPastOneYearGrowth returns the PastOneYearGrowth field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetPastOneYearGrowth() float32 {
	if o == nil || o.PastOneYearGrowth == nil {
		var ret float32
		return ret
	}
	return *o.PastOneYearGrowth
}

// GetPastOneYearGrowthOk returns a tuple with the PastOneYearGrowth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetPastOneYearGrowthOk() (*float32, bool) {
	if o == nil || o.PastOneYearGrowth == nil {
		return nil, false
	}
	return o.PastOneYearGrowth, true
}

// HasPastOneYearGrowth returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasPastOneYearGrowth() bool {
	if o != nil && o.PastOneYearGrowth != nil {
		return true
	}

	return false
}

// SetPastOneYearGrowth gets a reference to the given float32 and assigns it to the PastOneYearGrowth field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetPastOneYearGrowth(v float32) {
	o.PastOneYearGrowth = &v
}

// GetPastFiveYearGrowth returns the PastFiveYearGrowth field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetPastFiveYearGrowth() float32 {
	if o == nil || o.PastFiveYearGrowth == nil {
		var ret float32
		return ret
	}
	return *o.PastFiveYearGrowth
}

// GetPastFiveYearGrowthOk returns a tuple with the PastFiveYearGrowth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetPastFiveYearGrowthOk() (*float32, bool) {
	if o == nil || o.PastFiveYearGrowth == nil {
		return nil, false
	}
	return o.PastFiveYearGrowth, true
}

// HasPastFiveYearGrowth returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasPastFiveYearGrowth() bool {
	if o != nil && o.PastFiveYearGrowth != nil {
		return true
	}

	return false
}

// SetPastFiveYearGrowth gets a reference to the given float32 and assigns it to the PastFiveYearGrowth field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetPastFiveYearGrowth(v float32) {
	o.PastFiveYearGrowth = &v
}

// GetROE returns the ROE field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetROE() float32 {
	if o == nil || o.ROE == nil {
		var ret float32
		return ret
	}
	return *o.ROE
}

// GetROEOk returns a tuple with the ROE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetROEOk() (*float32, bool) {
	if o == nil || o.ROE == nil {
		return nil, false
	}
	return o.ROE, true
}

// HasROE returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasROE() bool {
	if o != nil && o.ROE != nil {
		return true
	}

	return false
}

// SetROE gets a reference to the given float32 and assigns it to the ROE field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetROE(v float32) {
	o.ROE = &v
}

// GetROA returns the ROA field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetROA() float32 {
	if o == nil || o.ROA == nil {
		var ret float32
		return ret
	}
	return *o.ROA
}

// GetROAOk returns a tuple with the ROA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetROAOk() (*float32, bool) {
	if o == nil || o.ROA == nil {
		return nil, false
	}
	return o.ROA, true
}

// HasROA returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasROA() bool {
	if o != nil && o.ROA != nil {
		return true
	}

	return false
}

// SetROA gets a reference to the given float32 and assigns it to the ROA field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetROA(v float32) {
	o.ROA = &v
}

// GetDividendYield returns the DividendYield field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetDividendYield() float32 {
	if o == nil || o.DividendYield == nil {
		var ret float32
		return ret
	}
	return *o.DividendYield
}

// GetDividendYieldOk returns a tuple with the DividendYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetDividendYieldOk() (*float32, bool) {
	if o == nil || o.DividendYield == nil {
		return nil, false
	}
	return o.DividendYield, true
}

// HasDividendYield returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasDividendYield() bool {
	if o != nil && o.DividendYield != nil {
		return true
	}

	return false
}

// SetDividendYield gets a reference to the given float32 and assigns it to the DividendYield field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetDividendYield(v float32) {
	o.DividendYield = &v
}

// GetFutureDividendYield returns the FutureDividendYield field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetFutureDividendYield() float32 {
	if o == nil || o.FutureDividendYield == nil {
		var ret float32
		return ret
	}
	return *o.FutureDividendYield
}

// GetFutureDividendYieldOk returns a tuple with the FutureDividendYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetFutureDividendYieldOk() (*float32, bool) {
	if o == nil || o.FutureDividendYield == nil {
		return nil, false
	}
	return o.FutureDividendYield, true
}

// HasFutureDividendYield returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasFutureDividendYield() bool {
	if o != nil && o.FutureDividendYield != nil {
		return true
	}

	return false
}

// SetFutureDividendYield gets a reference to the given float32 and assigns it to the FutureDividendYield field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetFutureDividendYield(v float32) {
	o.FutureDividendYield = &v
}

// GetPayoutRatio returns the PayoutRatio field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyAnalysisExtendedIndustryAverages) GetPayoutRatio() float32 {
	if o == nil || o.PayoutRatio.Get() == nil {
		var ret float32
		return ret
	}
	return *o.PayoutRatio.Get()
}

// GetPayoutRatioOk returns a tuple with the PayoutRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyAnalysisExtendedIndustryAverages) GetPayoutRatioOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PayoutRatio.Get(), o.PayoutRatio.IsSet()
}

// HasPayoutRatio returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasPayoutRatio() bool {
	if o != nil && o.PayoutRatio.IsSet() {
		return true
	}

	return false
}

// SetPayoutRatio gets a reference to the given NullableFloat32 and assigns it to the PayoutRatio field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetPayoutRatio(v float32) {
	o.PayoutRatio.Set(&v)
}

// SetPayoutRatioNil sets the value for PayoutRatio to be an explicit nil
func (o *CompanyAnalysisExtendedIndustryAverages) SetPayoutRatioNil() {
	o.PayoutRatio.Set(nil)
}

// UnsetPayoutRatio ensures that no value is present for PayoutRatio, not even an explicit nil
func (o *CompanyAnalysisExtendedIndustryAverages) UnsetPayoutRatio() {
	o.PayoutRatio.Unset()
}

// GetEPS returns the EPS field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetEPS() float32 {
	if o == nil || o.EPS == nil {
		var ret float32
		return ret
	}
	return *o.EPS
}

// GetEPSOk returns a tuple with the EPS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetEPSOk() (*float32, bool) {
	if o == nil || o.EPS == nil {
		return nil, false
	}
	return o.EPS, true
}

// HasEPS returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasEPS() bool {
	if o != nil && o.EPS != nil {
		return true
	}

	return false
}

// SetEPS gets a reference to the given float32 and assigns it to the EPS field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetEPS(v float32) {
	o.EPS = &v
}

// GetInsiderBuying returns the InsiderBuying field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetInsiderBuying() float32 {
	if o == nil || o.InsiderBuying == nil {
		var ret float32
		return ret
	}
	return *o.InsiderBuying
}

// GetInsiderBuyingOk returns a tuple with the InsiderBuying field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetInsiderBuyingOk() (*float32, bool) {
	if o == nil || o.InsiderBuying == nil {
		return nil, false
	}
	return o.InsiderBuying, true
}

// HasInsiderBuying returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasInsiderBuying() bool {
	if o != nil && o.InsiderBuying != nil {
		return true
	}

	return false
}

// SetInsiderBuying gets a reference to the given float32 and assigns it to the InsiderBuying field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetInsiderBuying(v float32) {
	o.InsiderBuying = &v
}

// GetDebtEquity returns the DebtEquity field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetDebtEquity() float32 {
	if o == nil || o.DebtEquity == nil {
		var ret float32
		return ret
	}
	return *o.DebtEquity
}

// GetDebtEquityOk returns a tuple with the DebtEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetDebtEquityOk() (*float32, bool) {
	if o == nil || o.DebtEquity == nil {
		return nil, false
	}
	return o.DebtEquity, true
}

// HasDebtEquity returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasDebtEquity() bool {
	if o != nil && o.DebtEquity != nil {
		return true
	}

	return false
}

// SetDebtEquity gets a reference to the given float32 and assigns it to the DebtEquity field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetDebtEquity(v float32) {
	o.DebtEquity = &v
}

// GetLeveredBeta returns the LeveredBeta field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetLeveredBeta() float32 {
	if o == nil || o.LeveredBeta == nil {
		var ret float32
		return ret
	}
	return *o.LeveredBeta
}

// GetLeveredBetaOk returns a tuple with the LeveredBeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetLeveredBetaOk() (*float32, bool) {
	if o == nil || o.LeveredBeta == nil {
		return nil, false
	}
	return o.LeveredBeta, true
}

// HasLeveredBeta returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasLeveredBeta() bool {
	if o != nil && o.LeveredBeta != nil {
		return true
	}

	return false
}

// SetLeveredBeta gets a reference to the given float32 and assigns it to the LeveredBeta field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetLeveredBeta(v float32) {
	o.LeveredBeta = &v
}

// GetUnleveredBeta returns the UnleveredBeta field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetUnleveredBeta() float32 {
	if o == nil || o.UnleveredBeta == nil {
		var ret float32
		return ret
	}
	return *o.UnleveredBeta
}

// GetUnleveredBetaOk returns a tuple with the UnleveredBeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetUnleveredBetaOk() (*float32, bool) {
	if o == nil || o.UnleveredBeta == nil {
		return nil, false
	}
	return o.UnleveredBeta, true
}

// HasUnleveredBeta returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasUnleveredBeta() bool {
	if o != nil && o.UnleveredBeta != nil {
		return true
	}

	return false
}

// SetUnleveredBeta gets a reference to the given float32 and assigns it to the UnleveredBeta field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetUnleveredBeta(v float32) {
	o.UnleveredBeta = &v
}

// GetTotalBaseCount returns the TotalBaseCount field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetTotalBaseCount() int32 {
	if o == nil || o.TotalBaseCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalBaseCount
}

// GetTotalBaseCountOk returns a tuple with the TotalBaseCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetTotalBaseCountOk() (*int32, bool) {
	if o == nil || o.TotalBaseCount == nil {
		return nil, false
	}
	return o.TotalBaseCount, true
}

// HasTotalBaseCount returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasTotalBaseCount() bool {
	if o != nil && o.TotalBaseCount != nil {
		return true
	}

	return false
}

// SetTotalBaseCount gets a reference to the given int32 and assigns it to the TotalBaseCount field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetTotalBaseCount(v int32) {
	o.TotalBaseCount = &v
}

// GetProfitableCount returns the ProfitableCount field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetProfitableCount() int32 {
	if o == nil || o.ProfitableCount == nil {
		var ret int32
		return ret
	}
	return *o.ProfitableCount
}

// GetProfitableCountOk returns a tuple with the ProfitableCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetProfitableCountOk() (*int32, bool) {
	if o == nil || o.ProfitableCount == nil {
		return nil, false
	}
	return o.ProfitableCount, true
}

// HasProfitableCount returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasProfitableCount() bool {
	if o != nil && o.ProfitableCount != nil {
		return true
	}

	return false
}

// SetProfitableCount gets a reference to the given int32 and assigns it to the ProfitableCount field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetProfitableCount(v int32) {
	o.ProfitableCount = &v
}

// GetAnalystCoverageCount returns the AnalystCoverageCount field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetAnalystCoverageCount() int32 {
	if o == nil || o.AnalystCoverageCount == nil {
		var ret int32
		return ret
	}
	return *o.AnalystCoverageCount
}

// GetAnalystCoverageCountOk returns a tuple with the AnalystCoverageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetAnalystCoverageCountOk() (*int32, bool) {
	if o == nil || o.AnalystCoverageCount == nil {
		return nil, false
	}
	return o.AnalystCoverageCount, true
}

// HasAnalystCoverageCount returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasAnalystCoverageCount() bool {
	if o != nil && o.AnalystCoverageCount != nil {
		return true
	}

	return false
}

// SetAnalystCoverageCount gets a reference to the given int32 and assigns it to the AnalystCoverageCount field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetAnalystCoverageCount(v int32) {
	o.AnalystCoverageCount = &v
}

// GetDividendCount returns the DividendCount field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetDividendCount() int32 {
	if o == nil || o.DividendCount == nil {
		var ret int32
		return ret
	}
	return *o.DividendCount
}

// GetDividendCountOk returns a tuple with the DividendCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetDividendCountOk() (*int32, bool) {
	if o == nil || o.DividendCount == nil {
		return nil, false
	}
	return o.DividendCount, true
}

// HasDividendCount returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasDividendCount() bool {
	if o != nil && o.DividendCount != nil {
		return true
	}

	return false
}

// SetDividendCount gets a reference to the given int32 and assigns it to the DividendCount field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetDividendCount(v int32) {
	o.DividendCount = &v
}

// GetBetaCount returns the BetaCount field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetBetaCount() int32 {
	if o == nil || o.BetaCount == nil {
		var ret int32
		return ret
	}
	return *o.BetaCount
}

// GetBetaCountOk returns a tuple with the BetaCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetBetaCountOk() (*int32, bool) {
	if o == nil || o.BetaCount == nil {
		return nil, false
	}
	return o.BetaCount, true
}

// HasBetaCount returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasBetaCount() bool {
	if o != nil && o.BetaCount != nil {
		return true
	}

	return false
}

// SetBetaCount gets a reference to the given int32 and assigns it to the BetaCount field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetBetaCount(v int32) {
	o.BetaCount = &v
}

// GetEarningsPerShareGrowthAnnual returns the EarningsPerShareGrowthAnnual field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetEarningsPerShareGrowthAnnual() float32 {
	if o == nil || o.EarningsPerShareGrowthAnnual == nil {
		var ret float32
		return ret
	}
	return *o.EarningsPerShareGrowthAnnual
}

// GetEarningsPerShareGrowthAnnualOk returns a tuple with the EarningsPerShareGrowthAnnual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetEarningsPerShareGrowthAnnualOk() (*float32, bool) {
	if o == nil || o.EarningsPerShareGrowthAnnual == nil {
		return nil, false
	}
	return o.EarningsPerShareGrowthAnnual, true
}

// HasEarningsPerShareGrowthAnnual returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasEarningsPerShareGrowthAnnual() bool {
	if o != nil && o.EarningsPerShareGrowthAnnual != nil {
		return true
	}

	return false
}

// SetEarningsPerShareGrowthAnnual gets a reference to the given float32 and assigns it to the EarningsPerShareGrowthAnnual field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetEarningsPerShareGrowthAnnual(v float32) {
	o.EarningsPerShareGrowthAnnual = &v
}

// GetNetIncomeGrowthAnnual returns the NetIncomeGrowthAnnual field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetNetIncomeGrowthAnnual() float32 {
	if o == nil || o.NetIncomeGrowthAnnual == nil {
		var ret float32
		return ret
	}
	return *o.NetIncomeGrowthAnnual
}

// GetNetIncomeGrowthAnnualOk returns a tuple with the NetIncomeGrowthAnnual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetNetIncomeGrowthAnnualOk() (*float32, bool) {
	if o == nil || o.NetIncomeGrowthAnnual == nil {
		return nil, false
	}
	return o.NetIncomeGrowthAnnual, true
}

// HasNetIncomeGrowthAnnual returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasNetIncomeGrowthAnnual() bool {
	if o != nil && o.NetIncomeGrowthAnnual != nil {
		return true
	}

	return false
}

// SetNetIncomeGrowthAnnual gets a reference to the given float32 and assigns it to the NetIncomeGrowthAnnual field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetNetIncomeGrowthAnnual(v float32) {
	o.NetIncomeGrowthAnnual = &v
}

// GetCashOpsGrowthAnnual returns the CashOpsGrowthAnnual field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetCashOpsGrowthAnnual() float32 {
	if o == nil || o.CashOpsGrowthAnnual == nil {
		var ret float32
		return ret
	}
	return *o.CashOpsGrowthAnnual
}

// GetCashOpsGrowthAnnualOk returns a tuple with the CashOpsGrowthAnnual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetCashOpsGrowthAnnualOk() (*float32, bool) {
	if o == nil || o.CashOpsGrowthAnnual == nil {
		return nil, false
	}
	return o.CashOpsGrowthAnnual, true
}

// HasCashOpsGrowthAnnual returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasCashOpsGrowthAnnual() bool {
	if o != nil && o.CashOpsGrowthAnnual != nil {
		return true
	}

	return false
}

// SetCashOpsGrowthAnnual gets a reference to the given float32 and assigns it to the CashOpsGrowthAnnual field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetCashOpsGrowthAnnual(v float32) {
	o.CashOpsGrowthAnnual = &v
}

// GetRevenueGrowthAnnual returns the RevenueGrowthAnnual field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetRevenueGrowthAnnual() float32 {
	if o == nil || o.RevenueGrowthAnnual == nil {
		var ret float32
		return ret
	}
	return *o.RevenueGrowthAnnual
}

// GetRevenueGrowthAnnualOk returns a tuple with the RevenueGrowthAnnual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetRevenueGrowthAnnualOk() (*float32, bool) {
	if o == nil || o.RevenueGrowthAnnual == nil {
		return nil, false
	}
	return o.RevenueGrowthAnnual, true
}

// HasRevenueGrowthAnnual returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasRevenueGrowthAnnual() bool {
	if o != nil && o.RevenueGrowthAnnual != nil {
		return true
	}

	return false
}

// SetRevenueGrowthAnnual gets a reference to the given float32 and assigns it to the RevenueGrowthAnnual field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetRevenueGrowthAnnual(v float32) {
	o.RevenueGrowthAnnual = &v
}

// GetLeveredBetaMedian returns the LeveredBetaMedian field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetLeveredBetaMedian() float32 {
	if o == nil || o.LeveredBetaMedian == nil {
		var ret float32
		return ret
	}
	return *o.LeveredBetaMedian
}

// GetLeveredBetaMedianOk returns a tuple with the LeveredBetaMedian field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetLeveredBetaMedianOk() (*float32, bool) {
	if o == nil || o.LeveredBetaMedian == nil {
		return nil, false
	}
	return o.LeveredBetaMedian, true
}

// HasLeveredBetaMedian returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasLeveredBetaMedian() bool {
	if o != nil && o.LeveredBetaMedian != nil {
		return true
	}

	return false
}

// SetLeveredBetaMedian gets a reference to the given float32 and assigns it to the LeveredBetaMedian field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetLeveredBetaMedian(v float32) {
	o.LeveredBetaMedian = &v
}

// GetBaseSource returns the BaseSource field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetBaseSource() string {
	if o == nil || o.BaseSource == nil {
		var ret string
		return ret
	}
	return *o.BaseSource
}

// GetBaseSourceOk returns a tuple with the BaseSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetBaseSourceOk() (*string, bool) {
	if o == nil || o.BaseSource == nil {
		return nil, false
	}
	return o.BaseSource, true
}

// HasBaseSource returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasBaseSource() bool {
	if o != nil && o.BaseSource != nil {
		return true
	}

	return false
}

// SetBaseSource gets a reference to the given string and assigns it to the BaseSource field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetBaseSource(v string) {
	o.BaseSource = &v
}

// GetProfitableSource returns the ProfitableSource field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetProfitableSource() string {
	if o == nil || o.ProfitableSource == nil {
		var ret string
		return ret
	}
	return *o.ProfitableSource
}

// GetProfitableSourceOk returns a tuple with the ProfitableSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetProfitableSourceOk() (*string, bool) {
	if o == nil || o.ProfitableSource == nil {
		return nil, false
	}
	return o.ProfitableSource, true
}

// HasProfitableSource returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasProfitableSource() bool {
	if o != nil && o.ProfitableSource != nil {
		return true
	}

	return false
}

// SetProfitableSource gets a reference to the given string and assigns it to the ProfitableSource field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetProfitableSource(v string) {
	o.ProfitableSource = &v
}

// GetAnalystSource returns the AnalystSource field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetAnalystSource() string {
	if o == nil || o.AnalystSource == nil {
		var ret string
		return ret
	}
	return *o.AnalystSource
}

// GetAnalystSourceOk returns a tuple with the AnalystSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetAnalystSourceOk() (*string, bool) {
	if o == nil || o.AnalystSource == nil {
		return nil, false
	}
	return o.AnalystSource, true
}

// HasAnalystSource returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasAnalystSource() bool {
	if o != nil && o.AnalystSource != nil {
		return true
	}

	return false
}

// SetAnalystSource gets a reference to the given string and assigns it to the AnalystSource field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetAnalystSource(v string) {
	o.AnalystSource = &v
}

// GetDividendSource returns the DividendSource field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetDividendSource() string {
	if o == nil || o.DividendSource == nil {
		var ret string
		return ret
	}
	return *o.DividendSource
}

// GetDividendSourceOk returns a tuple with the DividendSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetDividendSourceOk() (*string, bool) {
	if o == nil || o.DividendSource == nil {
		return nil, false
	}
	return o.DividendSource, true
}

// HasDividendSource returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasDividendSource() bool {
	if o != nil && o.DividendSource != nil {
		return true
	}

	return false
}

// SetDividendSource gets a reference to the given string and assigns it to the DividendSource field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetDividendSource(v string) {
	o.DividendSource = &v
}

// GetBetaSource returns the BetaSource field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetBetaSource() string {
	if o == nil || o.BetaSource == nil {
		var ret string
		return ret
	}
	return *o.BetaSource
}

// GetBetaSourceOk returns a tuple with the BetaSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetBetaSourceOk() (*string, bool) {
	if o == nil || o.BetaSource == nil {
		return nil, false
	}
	return o.BetaSource, true
}

// HasBetaSource returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasBetaSource() bool {
	if o != nil && o.BetaSource != nil {
		return true
	}

	return false
}

// SetBetaSource gets a reference to the given string and assigns it to the BetaSource field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetBetaSource(v string) {
	o.BetaSource = &v
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedIndustryAverages) GetAll() CompanyAnalysisExtendedIndustryAveragesAll {
	if o == nil || o.All == nil {
		var ret CompanyAnalysisExtendedIndustryAveragesAll
		return ret
	}
	return *o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) GetAllOk() (*CompanyAnalysisExtendedIndustryAveragesAll, bool) {
	if o == nil || o.All == nil {
		return nil, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedIndustryAverages) HasAll() bool {
	if o != nil && o.All != nil {
		return true
	}

	return false
}

// SetAll gets a reference to the given CompanyAnalysisExtendedIndustryAveragesAll and assigns it to the All field.
func (o *CompanyAnalysisExtendedIndustryAverages) SetAll(v CompanyAnalysisExtendedIndustryAveragesAll) {
	o.All = &v
}

func (o CompanyAnalysisExtendedIndustryAverages) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IndustryId != nil {
		toSerialize["industryId"] = o.IndustryId
	}
	if o.CountryIso != nil {
		toSerialize["countryIso"] = o.CountryIso
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ValueScore != nil {
		toSerialize["valueScore"] = o.ValueScore
	}
	if o.DividendsScore != nil {
		toSerialize["dividendsScore"] = o.DividendsScore
	}
	if o.FuturePerformanceScore != nil {
		toSerialize["futurePerformanceScore"] = o.FuturePerformanceScore
	}
	if o.HealthScore != nil {
		toSerialize["healthScore"] = o.HealthScore
	}
	if o.PastPerformanceScore != nil {
		toSerialize["pastPerformanceScore"] = o.PastPerformanceScore
	}
	if o.TotalScore != nil {
		toSerialize["totalScore"] = o.TotalScore
	}
	if o.SharePrice != nil {
		toSerialize["sharePrice"] = o.SharePrice
	}
	if o.MarketCap != nil {
		toSerialize["marketCap"] = o.MarketCap
	}
	if o.IntrinsicDiscount != nil {
		toSerialize["intrinsicDiscount"] = o.IntrinsicDiscount
	}
	if o.AnalystCount != nil {
		toSerialize["analystCount"] = o.AnalystCount
	}
	if o.PE != nil {
		toSerialize["PE"] = o.PE
	}
	if o.PB != nil {
		toSerialize["PB"] = o.PB
	}
	if o.PEG != nil {
		toSerialize["PEG"] = o.PEG
	}
	if o.FutureOneYearGrowth != nil {
		toSerialize["futureOneYearGrowth"] = o.FutureOneYearGrowth
	}
	if o.FutureThreeYearGrowth != nil {
		toSerialize["futureThreeYearGrowth"] = o.FutureThreeYearGrowth
	}
	if o.HistoricalDividendYield != nil {
		toSerialize["historical_dividend_yield"] = o.HistoricalDividendYield
	}
	if o.FutureOneYearROE.IsSet() {
		toSerialize["futureOneYearROE"] = o.FutureOneYearROE.Get()
	}
	if o.FutureThreeYearROE.IsSet() {
		toSerialize["futureThreeYearROE"] = o.FutureThreeYearROE.Get()
	}
	if o.PastOneYearGrowth != nil {
		toSerialize["pastOneYearGrowth"] = o.PastOneYearGrowth
	}
	if o.PastFiveYearGrowth != nil {
		toSerialize["pastFiveYearGrowth"] = o.PastFiveYearGrowth
	}
	if o.ROE != nil {
		toSerialize["ROE"] = o.ROE
	}
	if o.ROA != nil {
		toSerialize["ROA"] = o.ROA
	}
	if o.DividendYield != nil {
		toSerialize["dividendYield"] = o.DividendYield
	}
	if o.FutureDividendYield != nil {
		toSerialize["futureDividendYield"] = o.FutureDividendYield
	}
	if o.PayoutRatio.IsSet() {
		toSerialize["payoutRatio"] = o.PayoutRatio.Get()
	}
	if o.EPS != nil {
		toSerialize["EPS"] = o.EPS
	}
	if o.InsiderBuying != nil {
		toSerialize["insiderBuying"] = o.InsiderBuying
	}
	if o.DebtEquity != nil {
		toSerialize["debtEquity"] = o.DebtEquity
	}
	if o.LeveredBeta != nil {
		toSerialize["leveredBeta"] = o.LeveredBeta
	}
	if o.UnleveredBeta != nil {
		toSerialize["unleveredBeta"] = o.UnleveredBeta
	}
	if o.TotalBaseCount != nil {
		toSerialize["totalBaseCount"] = o.TotalBaseCount
	}
	if o.ProfitableCount != nil {
		toSerialize["profitableCount"] = o.ProfitableCount
	}
	if o.AnalystCoverageCount != nil {
		toSerialize["analystCoverageCount"] = o.AnalystCoverageCount
	}
	if o.DividendCount != nil {
		toSerialize["dividendCount"] = o.DividendCount
	}
	if o.BetaCount != nil {
		toSerialize["betaCount"] = o.BetaCount
	}
	if o.EarningsPerShareGrowthAnnual != nil {
		toSerialize["earningsPerShareGrowthAnnual"] = o.EarningsPerShareGrowthAnnual
	}
	if o.NetIncomeGrowthAnnual != nil {
		toSerialize["netIncomeGrowthAnnual"] = o.NetIncomeGrowthAnnual
	}
	if o.CashOpsGrowthAnnual != nil {
		toSerialize["cashOpsGrowthAnnual"] = o.CashOpsGrowthAnnual
	}
	if o.RevenueGrowthAnnual != nil {
		toSerialize["revenueGrowthAnnual"] = o.RevenueGrowthAnnual
	}
	if o.LeveredBetaMedian != nil {
		toSerialize["leveredBetaMedian"] = o.LeveredBetaMedian
	}
	if o.BaseSource != nil {
		toSerialize["baseSource"] = o.BaseSource
	}
	if o.ProfitableSource != nil {
		toSerialize["profitableSource"] = o.ProfitableSource
	}
	if o.AnalystSource != nil {
		toSerialize["analystSource"] = o.AnalystSource
	}
	if o.DividendSource != nil {
		toSerialize["dividendSource"] = o.DividendSource
	}
	if o.BetaSource != nil {
		toSerialize["betaSource"] = o.BetaSource
	}
	if o.All != nil {
		toSerialize["all"] = o.All
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyAnalysisExtendedIndustryAverages struct {
	value *CompanyAnalysisExtendedIndustryAverages
	isSet bool
}

func (v NullableCompanyAnalysisExtendedIndustryAverages) Get() *CompanyAnalysisExtendedIndustryAverages {
	return v.value
}

func (v *NullableCompanyAnalysisExtendedIndustryAverages) Set(val *CompanyAnalysisExtendedIndustryAverages) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyAnalysisExtendedIndustryAverages) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyAnalysisExtendedIndustryAverages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyAnalysisExtendedIndustryAverages(val *CompanyAnalysisExtendedIndustryAverages) *NullableCompanyAnalysisExtendedIndustryAverages {
	return &NullableCompanyAnalysisExtendedIndustryAverages{value: val, isSet: true}
}

func (v NullableCompanyAnalysisExtendedIndustryAverages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyAnalysisExtendedIndustryAverages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
