/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyAnalysisExtended struct for CompanyAnalysisExtended
type CompanyAnalysisExtended struct {
	Id               *string                                  `json:"id,omitempty"`
	Analysis         *CompanyAnalysisExtendedAnalysis         `json:"analysis,omitempty"`
	IndustryAverages *CompanyAnalysisExtendedIndustryAverages `json:"industry_averages,omitempty"`
	RawData          *CompanyAnalysisExtendedRaw              `json:"raw_data,omitempty"`
}

// NewCompanyAnalysisExtended instantiates a new CompanyAnalysisExtended object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyAnalysisExtended() *CompanyAnalysisExtended {
	this := CompanyAnalysisExtended{}
	return &this
}

// NewCompanyAnalysisExtendedWithDefaults instantiates a new CompanyAnalysisExtended object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyAnalysisExtendedWithDefaults() *CompanyAnalysisExtended {
	this := CompanyAnalysisExtended{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyAnalysisExtended) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtended) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyAnalysisExtended) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CompanyAnalysisExtended) SetId(v string) {
	o.Id = &v
}

// GetAnalysis returns the Analysis field value if set, zero value otherwise.
func (o *CompanyAnalysisExtended) GetAnalysis() CompanyAnalysisExtendedAnalysis {
	if o == nil || o.Analysis == nil {
		var ret CompanyAnalysisExtendedAnalysis
		return ret
	}
	return *o.Analysis
}

// GetAnalysisOk returns a tuple with the Analysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtended) GetAnalysisOk() (*CompanyAnalysisExtendedAnalysis, bool) {
	if o == nil || o.Analysis == nil {
		return nil, false
	}
	return o.Analysis, true
}

// HasAnalysis returns a boolean if a field has been set.
func (o *CompanyAnalysisExtended) HasAnalysis() bool {
	if o != nil && o.Analysis != nil {
		return true
	}

	return false
}

// SetAnalysis gets a reference to the given CompanyAnalysisExtendedAnalysis and assigns it to the Analysis field.
func (o *CompanyAnalysisExtended) SetAnalysis(v CompanyAnalysisExtendedAnalysis) {
	o.Analysis = &v
}

// GetIndustryAverages returns the IndustryAverages field value if set, zero value otherwise.
func (o *CompanyAnalysisExtended) GetIndustryAverages() CompanyAnalysisExtendedIndustryAverages {
	if o == nil || o.IndustryAverages == nil {
		var ret CompanyAnalysisExtendedIndustryAverages
		return ret
	}
	return *o.IndustryAverages
}

// GetIndustryAveragesOk returns a tuple with the IndustryAverages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtended) GetIndustryAveragesOk() (*CompanyAnalysisExtendedIndustryAverages, bool) {
	if o == nil || o.IndustryAverages == nil {
		return nil, false
	}
	return o.IndustryAverages, true
}

// HasIndustryAverages returns a boolean if a field has been set.
func (o *CompanyAnalysisExtended) HasIndustryAverages() bool {
	if o != nil && o.IndustryAverages != nil {
		return true
	}

	return false
}

// SetIndustryAverages gets a reference to the given CompanyAnalysisExtendedIndustryAverages and assigns it to the IndustryAverages field.
func (o *CompanyAnalysisExtended) SetIndustryAverages(v CompanyAnalysisExtendedIndustryAverages) {
	o.IndustryAverages = &v
}

// GetRawData returns the RawData field value if set, zero value otherwise.
func (o *CompanyAnalysisExtended) GetRawData() CompanyAnalysisExtendedRaw {
	if o == nil || o.RawData == nil {
		var ret CompanyAnalysisExtendedRaw
		return ret
	}
	return *o.RawData
}

// GetRawDataOk returns a tuple with the RawData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtended) GetRawDataOk() (*CompanyAnalysisExtendedRaw, bool) {
	if o == nil || o.RawData == nil {
		return nil, false
	}
	return o.RawData, true
}

// HasRawData returns a boolean if a field has been set.
func (o *CompanyAnalysisExtended) HasRawData() bool {
	if o != nil && o.RawData != nil {
		return true
	}

	return false
}

// SetRawData gets a reference to the given CompanyAnalysisExtendedRaw and assigns it to the RawData field.
func (o *CompanyAnalysisExtended) SetRawData(v CompanyAnalysisExtendedRaw) {
	o.RawData = &v
}

func (o CompanyAnalysisExtended) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Analysis != nil {
		toSerialize["analysis"] = o.Analysis
	}
	if o.IndustryAverages != nil {
		toSerialize["industry_averages"] = o.IndustryAverages
	}
	if o.RawData != nil {
		toSerialize["raw_data"] = o.RawData
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyAnalysisExtended struct {
	value *CompanyAnalysisExtended
	isSet bool
}

func (v NullableCompanyAnalysisExtended) Get() *CompanyAnalysisExtended {
	return v.value
}

func (v *NullableCompanyAnalysisExtended) Set(val *CompanyAnalysisExtended) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyAnalysisExtended) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyAnalysisExtended) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyAnalysisExtended(val *CompanyAnalysisExtended) *NullableCompanyAnalysisExtended {
	return &NullableCompanyAnalysisExtended{value: val, isSet: true}
}

func (v NullableCompanyAnalysisExtended) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyAnalysisExtended) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
