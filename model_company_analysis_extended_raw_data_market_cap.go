/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyAnalysisExtendedRawDataMarketCap struct for CompanyAnalysisExtendedRawDataMarketCap
type CompanyAnalysisExtendedRawDataMarketCap struct {
	Listing                          *float32 `json:"listing,omitempty"`
	Primary                          *float32 `json:"primary,omitempty"`
	Reported                         *float32 `json:"reported,omitempty"`
	Usd                              *float32 `json:"usd,omitempty"`
	SharesOutstanding                *float32 `json:"shares_outstanding,omitempty"`
	SharesOutstandingCommonEquity    *float32 `json:"shares_outstanding_common_equity,omitempty"`
	RelativeListingSharesOutstanding *float32 `json:"relative_listing_shares_outstanding,omitempty"`
	TradingItemToPrimaryRatio        *float32 `json:"trading_item_to_primary_ratio,omitempty"`
	TotalEnterpriseValueReported     *float32 `json:"total_enterprise_value_reported,omitempty"`
	MarketCapBand                    *string  `json:"market_cap_band,omitempty"`
}

// NewCompanyAnalysisExtendedRawDataMarketCap instantiates a new CompanyAnalysisExtendedRawDataMarketCap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyAnalysisExtendedRawDataMarketCap() *CompanyAnalysisExtendedRawDataMarketCap {
	this := CompanyAnalysisExtendedRawDataMarketCap{}
	return &this
}

// NewCompanyAnalysisExtendedRawDataMarketCapWithDefaults instantiates a new CompanyAnalysisExtendedRawDataMarketCap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyAnalysisExtendedRawDataMarketCapWithDefaults() *CompanyAnalysisExtendedRawDataMarketCap {
	this := CompanyAnalysisExtendedRawDataMarketCap{}
	return &this
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetListing() float32 {
	if o == nil || o.Listing == nil {
		var ret float32
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetListingOk() (*float32, bool) {
	if o == nil || o.Listing == nil {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) HasListing() bool {
	if o != nil && o.Listing != nil {
		return true
	}

	return false
}

// SetListing gets a reference to the given float32 and assigns it to the Listing field.
func (o *CompanyAnalysisExtendedRawDataMarketCap) SetListing(v float32) {
	o.Listing = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetPrimary() float32 {
	if o == nil || o.Primary == nil {
		var ret float32
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetPrimaryOk() (*float32, bool) {
	if o == nil || o.Primary == nil {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) HasPrimary() bool {
	if o != nil && o.Primary != nil {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given float32 and assigns it to the Primary field.
func (o *CompanyAnalysisExtendedRawDataMarketCap) SetPrimary(v float32) {
	o.Primary = &v
}

// GetReported returns the Reported field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetReported() float32 {
	if o == nil || o.Reported == nil {
		var ret float32
		return ret
	}
	return *o.Reported
}

// GetReportedOk returns a tuple with the Reported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetReportedOk() (*float32, bool) {
	if o == nil || o.Reported == nil {
		return nil, false
	}
	return o.Reported, true
}

// HasReported returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) HasReported() bool {
	if o != nil && o.Reported != nil {
		return true
	}

	return false
}

// SetReported gets a reference to the given float32 and assigns it to the Reported field.
func (o *CompanyAnalysisExtendedRawDataMarketCap) SetReported(v float32) {
	o.Reported = &v
}

// GetUsd returns the Usd field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetUsd() float32 {
	if o == nil || o.Usd == nil {
		var ret float32
		return ret
	}
	return *o.Usd
}

// GetUsdOk returns a tuple with the Usd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetUsdOk() (*float32, bool) {
	if o == nil || o.Usd == nil {
		return nil, false
	}
	return o.Usd, true
}

// HasUsd returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) HasUsd() bool {
	if o != nil && o.Usd != nil {
		return true
	}

	return false
}

// SetUsd gets a reference to the given float32 and assigns it to the Usd field.
func (o *CompanyAnalysisExtendedRawDataMarketCap) SetUsd(v float32) {
	o.Usd = &v
}

// GetSharesOutstanding returns the SharesOutstanding field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetSharesOutstanding() float32 {
	if o == nil || o.SharesOutstanding == nil {
		var ret float32
		return ret
	}
	return *o.SharesOutstanding
}

// GetSharesOutstandingOk returns a tuple with the SharesOutstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetSharesOutstandingOk() (*float32, bool) {
	if o == nil || o.SharesOutstanding == nil {
		return nil, false
	}
	return o.SharesOutstanding, true
}

// HasSharesOutstanding returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) HasSharesOutstanding() bool {
	if o != nil && o.SharesOutstanding != nil {
		return true
	}

	return false
}

// SetSharesOutstanding gets a reference to the given float32 and assigns it to the SharesOutstanding field.
func (o *CompanyAnalysisExtendedRawDataMarketCap) SetSharesOutstanding(v float32) {
	o.SharesOutstanding = &v
}

// GetSharesOutstandingCommonEquity returns the SharesOutstandingCommonEquity field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetSharesOutstandingCommonEquity() float32 {
	if o == nil || o.SharesOutstandingCommonEquity == nil {
		var ret float32
		return ret
	}
	return *o.SharesOutstandingCommonEquity
}

// GetSharesOutstandingCommonEquityOk returns a tuple with the SharesOutstandingCommonEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetSharesOutstandingCommonEquityOk() (*float32, bool) {
	if o == nil || o.SharesOutstandingCommonEquity == nil {
		return nil, false
	}
	return o.SharesOutstandingCommonEquity, true
}

// HasSharesOutstandingCommonEquity returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) HasSharesOutstandingCommonEquity() bool {
	if o != nil && o.SharesOutstandingCommonEquity != nil {
		return true
	}

	return false
}

// SetSharesOutstandingCommonEquity gets a reference to the given float32 and assigns it to the SharesOutstandingCommonEquity field.
func (o *CompanyAnalysisExtendedRawDataMarketCap) SetSharesOutstandingCommonEquity(v float32) {
	o.SharesOutstandingCommonEquity = &v
}

// GetRelativeListingSharesOutstanding returns the RelativeListingSharesOutstanding field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetRelativeListingSharesOutstanding() float32 {
	if o == nil || o.RelativeListingSharesOutstanding == nil {
		var ret float32
		return ret
	}
	return *o.RelativeListingSharesOutstanding
}

// GetRelativeListingSharesOutstandingOk returns a tuple with the RelativeListingSharesOutstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetRelativeListingSharesOutstandingOk() (*float32, bool) {
	if o == nil || o.RelativeListingSharesOutstanding == nil {
		return nil, false
	}
	return o.RelativeListingSharesOutstanding, true
}

// HasRelativeListingSharesOutstanding returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) HasRelativeListingSharesOutstanding() bool {
	if o != nil && o.RelativeListingSharesOutstanding != nil {
		return true
	}

	return false
}

// SetRelativeListingSharesOutstanding gets a reference to the given float32 and assigns it to the RelativeListingSharesOutstanding field.
func (o *CompanyAnalysisExtendedRawDataMarketCap) SetRelativeListingSharesOutstanding(v float32) {
	o.RelativeListingSharesOutstanding = &v
}

// GetTradingItemToPrimaryRatio returns the TradingItemToPrimaryRatio field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetTradingItemToPrimaryRatio() float32 {
	if o == nil || o.TradingItemToPrimaryRatio == nil {
		var ret float32
		return ret
	}
	return *o.TradingItemToPrimaryRatio
}

// GetTradingItemToPrimaryRatioOk returns a tuple with the TradingItemToPrimaryRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetTradingItemToPrimaryRatioOk() (*float32, bool) {
	if o == nil || o.TradingItemToPrimaryRatio == nil {
		return nil, false
	}
	return o.TradingItemToPrimaryRatio, true
}

// HasTradingItemToPrimaryRatio returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) HasTradingItemToPrimaryRatio() bool {
	if o != nil && o.TradingItemToPrimaryRatio != nil {
		return true
	}

	return false
}

// SetTradingItemToPrimaryRatio gets a reference to the given float32 and assigns it to the TradingItemToPrimaryRatio field.
func (o *CompanyAnalysisExtendedRawDataMarketCap) SetTradingItemToPrimaryRatio(v float32) {
	o.TradingItemToPrimaryRatio = &v
}

// GetTotalEnterpriseValueReported returns the TotalEnterpriseValueReported field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetTotalEnterpriseValueReported() float32 {
	if o == nil || o.TotalEnterpriseValueReported == nil {
		var ret float32
		return ret
	}
	return *o.TotalEnterpriseValueReported
}

// GetTotalEnterpriseValueReportedOk returns a tuple with the TotalEnterpriseValueReported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetTotalEnterpriseValueReportedOk() (*float32, bool) {
	if o == nil || o.TotalEnterpriseValueReported == nil {
		return nil, false
	}
	return o.TotalEnterpriseValueReported, true
}

// HasTotalEnterpriseValueReported returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) HasTotalEnterpriseValueReported() bool {
	if o != nil && o.TotalEnterpriseValueReported != nil {
		return true
	}

	return false
}

// SetTotalEnterpriseValueReported gets a reference to the given float32 and assigns it to the TotalEnterpriseValueReported field.
func (o *CompanyAnalysisExtendedRawDataMarketCap) SetTotalEnterpriseValueReported(v float32) {
	o.TotalEnterpriseValueReported = &v
}

// GetMarketCapBand returns the MarketCapBand field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetMarketCapBand() string {
	if o == nil || o.MarketCapBand == nil {
		var ret string
		return ret
	}
	return *o.MarketCapBand
}

// GetMarketCapBandOk returns a tuple with the MarketCapBand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) GetMarketCapBandOk() (*string, bool) {
	if o == nil || o.MarketCapBand == nil {
		return nil, false
	}
	return o.MarketCapBand, true
}

// HasMarketCapBand returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataMarketCap) HasMarketCapBand() bool {
	if o != nil && o.MarketCapBand != nil {
		return true
	}

	return false
}

// SetMarketCapBand gets a reference to the given string and assigns it to the MarketCapBand field.
func (o *CompanyAnalysisExtendedRawDataMarketCap) SetMarketCapBand(v string) {
	o.MarketCapBand = &v
}

func (o CompanyAnalysisExtendedRawDataMarketCap) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Listing != nil {
		toSerialize["listing"] = o.Listing
	}
	if o.Primary != nil {
		toSerialize["primary"] = o.Primary
	}
	if o.Reported != nil {
		toSerialize["reported"] = o.Reported
	}
	if o.Usd != nil {
		toSerialize["usd"] = o.Usd
	}
	if o.SharesOutstanding != nil {
		toSerialize["shares_outstanding"] = o.SharesOutstanding
	}
	if o.SharesOutstandingCommonEquity != nil {
		toSerialize["shares_outstanding_common_equity"] = o.SharesOutstandingCommonEquity
	}
	if o.RelativeListingSharesOutstanding != nil {
		toSerialize["relative_listing_shares_outstanding"] = o.RelativeListingSharesOutstanding
	}
	if o.TradingItemToPrimaryRatio != nil {
		toSerialize["trading_item_to_primary_ratio"] = o.TradingItemToPrimaryRatio
	}
	if o.TotalEnterpriseValueReported != nil {
		toSerialize["total_enterprise_value_reported"] = o.TotalEnterpriseValueReported
	}
	if o.MarketCapBand != nil {
		toSerialize["market_cap_band"] = o.MarketCapBand
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyAnalysisExtendedRawDataMarketCap struct {
	value *CompanyAnalysisExtendedRawDataMarketCap
	isSet bool
}

func (v NullableCompanyAnalysisExtendedRawDataMarketCap) Get() *CompanyAnalysisExtendedRawDataMarketCap {
	return v.value
}

func (v *NullableCompanyAnalysisExtendedRawDataMarketCap) Set(val *CompanyAnalysisExtendedRawDataMarketCap) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyAnalysisExtendedRawDataMarketCap) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyAnalysisExtendedRawDataMarketCap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyAnalysisExtendedRawDataMarketCap(val *CompanyAnalysisExtendedRawDataMarketCap) *NullableCompanyAnalysisExtendedRawDataMarketCap {
	return &NullableCompanyAnalysisExtendedRawDataMarketCap{value: val, isSet: true}
}

func (v NullableCompanyAnalysisExtendedRawDataMarketCap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyAnalysisExtendedRawDataMarketCap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
