/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Company struct for Company
type Company struct {
	Id                  *int64           `json:"id,omitempty"`
	CompanyId           *string          `json:"company_id,omitempty"`
	TradingItemId       *int64           `json:"trading_item_id,omitempty"`
	Name                *string          `json:"name,omitempty"`
	Slug                *string          `json:"slug,omitempty"`
	ExchangeSymbol      *string          `json:"exchange_symbol,omitempty"`
	UniqueSymbol        *string          `json:"unique_symbol,omitempty"`
	PrimaryTicker       *bool            `json:"primary_ticker,omitempty"`
	LastUpdated         *int64           `json:"last_updated,omitempty"`
	CanonicalUrl        *string          `json:"canonical_url,omitempty"`
	PrimaryCanonicalUrl NullableString   `json:"primary_canonical_url,omitempty"`
	IsSearchable        *bool            `json:"is_searchable,omitempty"`
	IsinSymbol          *string          `json:"isin_symbol,omitempty"`
	Analysis            *CompanyAnalysis `json:"analysis,omitempty"`
	Info                *CompanyInfo     `json:"info,omitempty"`
	Score               *CompanyScore    `json:"score,omitempty"`
}

// NewCompany instantiates a new Company object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompany() *Company {
	this := Company{}
	return &this
}

// NewCompanyWithDefaults instantiates a new Company object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyWithDefaults() *Company {
	this := Company{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Company) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Company) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Company) SetId(v int64) {
	o.Id = &v
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *Company) GetCompanyId() string {
	if o == nil || o.CompanyId == nil {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetCompanyIdOk() (*string, bool) {
	if o == nil || o.CompanyId == nil {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *Company) HasCompanyId() bool {
	if o != nil && o.CompanyId != nil {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *Company) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetTradingItemId returns the TradingItemId field value if set, zero value otherwise.
func (o *Company) GetTradingItemId() int64 {
	if o == nil || o.TradingItemId == nil {
		var ret int64
		return ret
	}
	return *o.TradingItemId
}

// GetTradingItemIdOk returns a tuple with the TradingItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetTradingItemIdOk() (*int64, bool) {
	if o == nil || o.TradingItemId == nil {
		return nil, false
	}
	return o.TradingItemId, true
}

// HasTradingItemId returns a boolean if a field has been set.
func (o *Company) HasTradingItemId() bool {
	if o != nil && o.TradingItemId != nil {
		return true
	}

	return false
}

// SetTradingItemId gets a reference to the given int64 and assigns it to the TradingItemId field.
func (o *Company) SetTradingItemId(v int64) {
	o.TradingItemId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Company) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Company) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Company) SetName(v string) {
	o.Name = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *Company) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *Company) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *Company) SetSlug(v string) {
	o.Slug = &v
}

// GetExchangeSymbol returns the ExchangeSymbol field value if set, zero value otherwise.
func (o *Company) GetExchangeSymbol() string {
	if o == nil || o.ExchangeSymbol == nil {
		var ret string
		return ret
	}
	return *o.ExchangeSymbol
}

// GetExchangeSymbolOk returns a tuple with the ExchangeSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetExchangeSymbolOk() (*string, bool) {
	if o == nil || o.ExchangeSymbol == nil {
		return nil, false
	}
	return o.ExchangeSymbol, true
}

// HasExchangeSymbol returns a boolean if a field has been set.
func (o *Company) HasExchangeSymbol() bool {
	if o != nil && o.ExchangeSymbol != nil {
		return true
	}

	return false
}

// SetExchangeSymbol gets a reference to the given string and assigns it to the ExchangeSymbol field.
func (o *Company) SetExchangeSymbol(v string) {
	o.ExchangeSymbol = &v
}

// GetUniqueSymbol returns the UniqueSymbol field value if set, zero value otherwise.
func (o *Company) GetUniqueSymbol() string {
	if o == nil || o.UniqueSymbol == nil {
		var ret string
		return ret
	}
	return *o.UniqueSymbol
}

// GetUniqueSymbolOk returns a tuple with the UniqueSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetUniqueSymbolOk() (*string, bool) {
	if o == nil || o.UniqueSymbol == nil {
		return nil, false
	}
	return o.UniqueSymbol, true
}

// HasUniqueSymbol returns a boolean if a field has been set.
func (o *Company) HasUniqueSymbol() bool {
	if o != nil && o.UniqueSymbol != nil {
		return true
	}

	return false
}

// SetUniqueSymbol gets a reference to the given string and assigns it to the UniqueSymbol field.
func (o *Company) SetUniqueSymbol(v string) {
	o.UniqueSymbol = &v
}

// GetPrimaryTicker returns the PrimaryTicker field value if set, zero value otherwise.
func (o *Company) GetPrimaryTicker() bool {
	if o == nil || o.PrimaryTicker == nil {
		var ret bool
		return ret
	}
	return *o.PrimaryTicker
}

// GetPrimaryTickerOk returns a tuple with the PrimaryTicker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetPrimaryTickerOk() (*bool, bool) {
	if o == nil || o.PrimaryTicker == nil {
		return nil, false
	}
	return o.PrimaryTicker, true
}

// HasPrimaryTicker returns a boolean if a field has been set.
func (o *Company) HasPrimaryTicker() bool {
	if o != nil && o.PrimaryTicker != nil {
		return true
	}

	return false
}

// SetPrimaryTicker gets a reference to the given bool and assigns it to the PrimaryTicker field.
func (o *Company) SetPrimaryTicker(v bool) {
	o.PrimaryTicker = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Company) GetLastUpdated() int64 {
	if o == nil || o.LastUpdated == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetLastUpdatedOk() (*int64, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Company) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given int64 and assigns it to the LastUpdated field.
func (o *Company) SetLastUpdated(v int64) {
	o.LastUpdated = &v
}

// GetCanonicalUrl returns the CanonicalUrl field value if set, zero value otherwise.
func (o *Company) GetCanonicalUrl() string {
	if o == nil || o.CanonicalUrl == nil {
		var ret string
		return ret
	}
	return *o.CanonicalUrl
}

// GetCanonicalUrlOk returns a tuple with the CanonicalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetCanonicalUrlOk() (*string, bool) {
	if o == nil || o.CanonicalUrl == nil {
		return nil, false
	}
	return o.CanonicalUrl, true
}

// HasCanonicalUrl returns a boolean if a field has been set.
func (o *Company) HasCanonicalUrl() bool {
	if o != nil && o.CanonicalUrl != nil {
		return true
	}

	return false
}

// SetCanonicalUrl gets a reference to the given string and assigns it to the CanonicalUrl field.
func (o *Company) SetCanonicalUrl(v string) {
	o.CanonicalUrl = &v
}

// GetPrimaryCanonicalUrl returns the PrimaryCanonicalUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Company) GetPrimaryCanonicalUrl() string {
	if o == nil || o.PrimaryCanonicalUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrimaryCanonicalUrl.Get()
}

// GetPrimaryCanonicalUrlOk returns a tuple with the PrimaryCanonicalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Company) GetPrimaryCanonicalUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryCanonicalUrl.Get(), o.PrimaryCanonicalUrl.IsSet()
}

// HasPrimaryCanonicalUrl returns a boolean if a field has been set.
func (o *Company) HasPrimaryCanonicalUrl() bool {
	if o != nil && o.PrimaryCanonicalUrl.IsSet() {
		return true
	}

	return false
}

// SetPrimaryCanonicalUrl gets a reference to the given NullableString and assigns it to the PrimaryCanonicalUrl field.
func (o *Company) SetPrimaryCanonicalUrl(v string) {
	o.PrimaryCanonicalUrl.Set(&v)
}

// SetPrimaryCanonicalUrlNil sets the value for PrimaryCanonicalUrl to be an explicit nil
func (o *Company) SetPrimaryCanonicalUrlNil() {
	o.PrimaryCanonicalUrl.Set(nil)
}

// UnsetPrimaryCanonicalUrl ensures that no value is present for PrimaryCanonicalUrl, not even an explicit nil
func (o *Company) UnsetPrimaryCanonicalUrl() {
	o.PrimaryCanonicalUrl.Unset()
}

// GetIsSearchable returns the IsSearchable field value if set, zero value otherwise.
func (o *Company) GetIsSearchable() bool {
	if o == nil || o.IsSearchable == nil {
		var ret bool
		return ret
	}
	return *o.IsSearchable
}

// GetIsSearchableOk returns a tuple with the IsSearchable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetIsSearchableOk() (*bool, bool) {
	if o == nil || o.IsSearchable == nil {
		return nil, false
	}
	return o.IsSearchable, true
}

// HasIsSearchable returns a boolean if a field has been set.
func (o *Company) HasIsSearchable() bool {
	if o != nil && o.IsSearchable != nil {
		return true
	}

	return false
}

// SetIsSearchable gets a reference to the given bool and assigns it to the IsSearchable field.
func (o *Company) SetIsSearchable(v bool) {
	o.IsSearchable = &v
}

// GetIsinSymbol returns the IsinSymbol field value if set, zero value otherwise.
func (o *Company) GetIsinSymbol() string {
	if o == nil || o.IsinSymbol == nil {
		var ret string
		return ret
	}
	return *o.IsinSymbol
}

// GetIsinSymbolOk returns a tuple with the IsinSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetIsinSymbolOk() (*string, bool) {
	if o == nil || o.IsinSymbol == nil {
		return nil, false
	}
	return o.IsinSymbol, true
}

// HasIsinSymbol returns a boolean if a field has been set.
func (o *Company) HasIsinSymbol() bool {
	if o != nil && o.IsinSymbol != nil {
		return true
	}

	return false
}

// SetIsinSymbol gets a reference to the given string and assigns it to the IsinSymbol field.
func (o *Company) SetIsinSymbol(v string) {
	o.IsinSymbol = &v
}

// GetAnalysis returns the Analysis field value if set, zero value otherwise.
func (o *Company) GetAnalysis() CompanyAnalysis {
	if o == nil || o.Analysis == nil {
		var ret CompanyAnalysis
		return ret
	}
	return *o.Analysis
}

// GetAnalysisOk returns a tuple with the Analysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetAnalysisOk() (*CompanyAnalysis, bool) {
	if o == nil || o.Analysis == nil {
		return nil, false
	}
	return o.Analysis, true
}

// HasAnalysis returns a boolean if a field has been set.
func (o *Company) HasAnalysis() bool {
	if o != nil && o.Analysis != nil {
		return true
	}

	return false
}

// SetAnalysis gets a reference to the given CompanyAnalysis and assigns it to the Analysis field.
func (o *Company) SetAnalysis(v CompanyAnalysis) {
	o.Analysis = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Company) GetInfo() CompanyInfo {
	if o == nil || o.Info == nil {
		var ret CompanyInfo
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetInfoOk() (*CompanyInfo, bool) {
	if o == nil || o.Info == nil {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Company) HasInfo() bool {
	if o != nil && o.Info != nil {
		return true
	}

	return false
}

// SetInfo gets a reference to the given CompanyInfo and assigns it to the Info field.
func (o *Company) SetInfo(v CompanyInfo) {
	o.Info = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *Company) GetScore() CompanyScore {
	if o == nil || o.Score == nil {
		var ret CompanyScore
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetScoreOk() (*CompanyScore, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *Company) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given CompanyScore and assigns it to the Score field.
func (o *Company) SetScore(v CompanyScore) {
	o.Score = &v
}

func (o Company) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CompanyId != nil {
		toSerialize["company_id"] = o.CompanyId
	}
	if o.TradingItemId != nil {
		toSerialize["trading_item_id"] = o.TradingItemId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	if o.ExchangeSymbol != nil {
		toSerialize["exchange_symbol"] = o.ExchangeSymbol
	}
	if o.UniqueSymbol != nil {
		toSerialize["unique_symbol"] = o.UniqueSymbol
	}
	if o.PrimaryTicker != nil {
		toSerialize["primary_ticker"] = o.PrimaryTicker
	}
	if o.LastUpdated != nil {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if o.CanonicalUrl != nil {
		toSerialize["canonical_url"] = o.CanonicalUrl
	}
	if o.PrimaryCanonicalUrl.IsSet() {
		toSerialize["primary_canonical_url"] = o.PrimaryCanonicalUrl.Get()
	}
	if o.IsSearchable != nil {
		toSerialize["is_searchable"] = o.IsSearchable
	}
	if o.IsinSymbol != nil {
		toSerialize["isin_symbol"] = o.IsinSymbol
	}
	if o.Analysis != nil {
		toSerialize["analysis"] = o.Analysis
	}
	if o.Info != nil {
		toSerialize["info"] = o.Info
	}
	if o.Score != nil {
		toSerialize["score"] = o.Score
	}
	return json.Marshal(toSerialize)
}

type NullableCompany struct {
	value *Company
	isSet bool
}

func (v NullableCompany) Get() *Company {
	return v.value
}

func (v *NullableCompany) Set(val *Company) {
	v.value = val
	v.isSet = true
}

func (v NullableCompany) IsSet() bool {
	return v.isSet
}

func (v *NullableCompany) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompany(val *Company) *NullableCompany {
	return &NullableCompany{value: val, isSet: true}
}

func (v NullableCompany) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompany) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
