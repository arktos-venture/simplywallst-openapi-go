/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyDataInfoCeo struct for CompanyDataInfoCeo
type CompanyDataInfoCeo struct {
	Name *string `json:"name,omitempty"`
	Age  *int32  `json:"age,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// NewCompanyDataInfoCeo instantiates a new CompanyDataInfoCeo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyDataInfoCeo() *CompanyDataInfoCeo {
	this := CompanyDataInfoCeo{}
	return &this
}

// NewCompanyDataInfoCeoWithDefaults instantiates a new CompanyDataInfoCeo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyDataInfoCeoWithDefaults() *CompanyDataInfoCeo {
	this := CompanyDataInfoCeo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CompanyDataInfoCeo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataInfoCeo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CompanyDataInfoCeo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CompanyDataInfoCeo) SetName(v string) {
	o.Name = &v
}

// GetAge returns the Age field value if set, zero value otherwise.
func (o *CompanyDataInfoCeo) GetAge() int32 {
	if o == nil || o.Age == nil {
		var ret int32
		return ret
	}
	return *o.Age
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataInfoCeo) GetAgeOk() (*int32, bool) {
	if o == nil || o.Age == nil {
		return nil, false
	}
	return o.Age, true
}

// HasAge returns a boolean if a field has been set.
func (o *CompanyDataInfoCeo) HasAge() bool {
	if o != nil && o.Age != nil {
		return true
	}

	return false
}

// SetAge gets a reference to the given int32 and assigns it to the Age field.
func (o *CompanyDataInfoCeo) SetAge(v int32) {
	o.Age = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *CompanyDataInfoCeo) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataInfoCeo) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *CompanyDataInfoCeo) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *CompanyDataInfoCeo) SetUrl(v string) {
	o.Url = &v
}

func (o CompanyDataInfoCeo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Age != nil {
		toSerialize["age"] = o.Age
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyDataInfoCeo struct {
	value *CompanyDataInfoCeo
	isSet bool
}

func (v NullableCompanyDataInfoCeo) Get() *CompanyDataInfoCeo {
	return v.value
}

func (v *NullableCompanyDataInfoCeo) Set(val *CompanyDataInfoCeo) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyDataInfoCeo) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyDataInfoCeo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyDataInfoCeo(val *CompanyDataInfoCeo) *NullableCompanyDataInfoCeo {
	return &NullableCompanyDataInfoCeo{value: val, isSet: true}
}

func (v NullableCompanyDataInfoCeo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyDataInfoCeo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
