/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IndustryTree struct for IndustryTree
type IndustryTree struct {
	Data *map[string]Industry `json:"data,omitempty"`
}

// NewIndustryTree instantiates a new IndustryTree object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndustryTree() *IndustryTree {
	this := IndustryTree{}
	return &this
}

// NewIndustryTreeWithDefaults instantiates a new IndustryTree object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndustryTreeWithDefaults() *IndustryTree {
	this := IndustryTree{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *IndustryTree) GetData() map[string]Industry {
	if o == nil || o.Data == nil {
		var ret map[string]Industry
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryTree) GetDataOk() (*map[string]Industry, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *IndustryTree) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]Industry and assigns it to the Data field.
func (o *IndustryTree) SetData(v map[string]Industry) {
	o.Data = &v
}

func (o IndustryTree) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableIndustryTree struct {
	value *IndustryTree
	isSet bool
}

func (v NullableIndustryTree) Get() *IndustryTree {
	return v.value
}

func (v *NullableIndustryTree) Set(val *IndustryTree) {
	v.value = val
	v.isSet = true
}

func (v NullableIndustryTree) IsSet() bool {
	return v.isSet
}

func (v *NullableIndustryTree) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndustryTree(val *IndustryTree) *NullableIndustryTree {
	return &NullableIndustryTree{value: val, isSet: true}
}

func (v NullableIndustryTree) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndustryTree) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
