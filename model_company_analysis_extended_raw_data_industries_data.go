/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyAnalysisExtendedRawDataIndustriesData struct for CompanyAnalysisExtendedRawDataIndustriesData
type CompanyAnalysisExtendedRawDataIndustriesData struct {
	Name      *string `json:"name,omitempty"`
	Level     *int64  `json:"level,omitempty"`
	SubTypeId *int64  `json:"sub_type_id,omitempty"`
	SicName   *string `json:"sic_name,omitempty"`
}

// NewCompanyAnalysisExtendedRawDataIndustriesData instantiates a new CompanyAnalysisExtendedRawDataIndustriesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyAnalysisExtendedRawDataIndustriesData() *CompanyAnalysisExtendedRawDataIndustriesData {
	this := CompanyAnalysisExtendedRawDataIndustriesData{}
	return &this
}

// NewCompanyAnalysisExtendedRawDataIndustriesDataWithDefaults instantiates a new CompanyAnalysisExtendedRawDataIndustriesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyAnalysisExtendedRawDataIndustriesDataWithDefaults() *CompanyAnalysisExtendedRawDataIndustriesData {
	this := CompanyAnalysisExtendedRawDataIndustriesData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) SetName(v string) {
	o.Name = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) GetLevel() int64 {
	if o == nil || o.Level == nil {
		var ret int64
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) GetLevelOk() (*int64, bool) {
	if o == nil || o.Level == nil {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) HasLevel() bool {
	if o != nil && o.Level != nil {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int64 and assigns it to the Level field.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) SetLevel(v int64) {
	o.Level = &v
}

// GetSubTypeId returns the SubTypeId field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) GetSubTypeId() int64 {
	if o == nil || o.SubTypeId == nil {
		var ret int64
		return ret
	}
	return *o.SubTypeId
}

// GetSubTypeIdOk returns a tuple with the SubTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) GetSubTypeIdOk() (*int64, bool) {
	if o == nil || o.SubTypeId == nil {
		return nil, false
	}
	return o.SubTypeId, true
}

// HasSubTypeId returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) HasSubTypeId() bool {
	if o != nil && o.SubTypeId != nil {
		return true
	}

	return false
}

// SetSubTypeId gets a reference to the given int64 and assigns it to the SubTypeId field.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) SetSubTypeId(v int64) {
	o.SubTypeId = &v
}

// GetSicName returns the SicName field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) GetSicName() string {
	if o == nil || o.SicName == nil {
		var ret string
		return ret
	}
	return *o.SicName
}

// GetSicNameOk returns a tuple with the SicName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) GetSicNameOk() (*string, bool) {
	if o == nil || o.SicName == nil {
		return nil, false
	}
	return o.SicName, true
}

// HasSicName returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) HasSicName() bool {
	if o != nil && o.SicName != nil {
		return true
	}

	return false
}

// SetSicName gets a reference to the given string and assigns it to the SicName field.
func (o *CompanyAnalysisExtendedRawDataIndustriesData) SetSicName(v string) {
	o.SicName = &v
}

func (o CompanyAnalysisExtendedRawDataIndustriesData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Level != nil {
		toSerialize["level"] = o.Level
	}
	if o.SubTypeId != nil {
		toSerialize["sub_type_id"] = o.SubTypeId
	}
	if o.SicName != nil {
		toSerialize["sic_name"] = o.SicName
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyAnalysisExtendedRawDataIndustriesData struct {
	value *CompanyAnalysisExtendedRawDataIndustriesData
	isSet bool
}

func (v NullableCompanyAnalysisExtendedRawDataIndustriesData) Get() *CompanyAnalysisExtendedRawDataIndustriesData {
	return v.value
}

func (v *NullableCompanyAnalysisExtendedRawDataIndustriesData) Set(val *CompanyAnalysisExtendedRawDataIndustriesData) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyAnalysisExtendedRawDataIndustriesData) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyAnalysisExtendedRawDataIndustriesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyAnalysisExtendedRawDataIndustriesData(val *CompanyAnalysisExtendedRawDataIndustriesData) *NullableCompanyAnalysisExtendedRawDataIndustriesData {
	return &NullableCompanyAnalysisExtendedRawDataIndustriesData{value: val, isSet: true}
}

func (v NullableCompanyAnalysisExtendedRawDataIndustriesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyAnalysisExtendedRawDataIndustriesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
