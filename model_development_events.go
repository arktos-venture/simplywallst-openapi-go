/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DevelopmentEvents struct for DevelopmentEvents
type DevelopmentEvents struct {
	Data *[]DevelopmentEvent `json:"data,omitempty"`
}

// NewDevelopmentEvents instantiates a new DevelopmentEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevelopmentEvents() *DevelopmentEvents {
	this := DevelopmentEvents{}
	return &this
}

// NewDevelopmentEventsWithDefaults instantiates a new DevelopmentEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevelopmentEventsWithDefaults() *DevelopmentEvents {
	this := DevelopmentEvents{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *DevelopmentEvents) GetData() []DevelopmentEvent {
	if o == nil || o.Data == nil {
		var ret []DevelopmentEvent
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevelopmentEvents) GetDataOk() (*[]DevelopmentEvent, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *DevelopmentEvents) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []DevelopmentEvent and assigns it to the Data field.
func (o *DevelopmentEvents) SetData(v []DevelopmentEvent) {
	o.Data = &v
}

func (o DevelopmentEvents) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableDevelopmentEvents struct {
	value *DevelopmentEvents
	isSet bool
}

func (v NullableDevelopmentEvents) Get() *DevelopmentEvents {
	return v.value
}

func (v *NullableDevelopmentEvents) Set(val *DevelopmentEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableDevelopmentEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableDevelopmentEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevelopmentEvents(val *DevelopmentEvents) *NullableDevelopmentEvents {
	return &NullableDevelopmentEvents{value: val, isSet: true}
}

func (v NullableDevelopmentEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevelopmentEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
