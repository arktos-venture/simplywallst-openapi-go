/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Grids struct for Grids
type Grids struct {
	Data *[]Company `json:"data,omitempty"`
	Meta *GridsMeta `json:"meta,omitempty"`
}

// NewGrids instantiates a new Grids object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGrids() *Grids {
	this := Grids{}
	return &this
}

// NewGridsWithDefaults instantiates a new Grids object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridsWithDefaults() *Grids {
	this := Grids{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Grids) GetData() []Company {
	if o == nil || o.Data == nil {
		var ret []Company
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grids) GetDataOk() (*[]Company, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Grids) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []Company and assigns it to the Data field.
func (o *Grids) SetData(v []Company) {
	o.Data = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Grids) GetMeta() GridsMeta {
	if o == nil || o.Meta == nil {
		var ret GridsMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grids) GetMetaOk() (*GridsMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Grids) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given GridsMeta and assigns it to the Meta field.
func (o *Grids) SetMeta(v GridsMeta) {
	o.Meta = &v
}

func (o Grids) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableGrids struct {
	value *Grids
	isSet bool
}

func (v NullableGrids) Get() *Grids {
	return v.value
}

func (v *NullableGrids) Set(val *Grids) {
	v.value = val
	v.isSet = true
}

func (v NullableGrids) IsSet() bool {
	return v.isSet
}

func (v *NullableGrids) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrids(val *Grids) *NullableGrids {
	return &NullableGrids{value: val, isSet: true}
}

func (v NullableGrids) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrids) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
