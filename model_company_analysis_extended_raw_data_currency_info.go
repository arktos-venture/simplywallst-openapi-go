/*
 * simply-wallst
 *
 * simply-wallst API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyAnalysisExtendedRawDataCurrencyInfo struct for CompanyAnalysisExtendedRawDataCurrencyInfo
type CompanyAnalysisExtendedRawDataCurrencyInfo struct {
	ReportingUnit                    *int64  `json:"reporting_unit,omitempty"`
	ReportingUnitText                *string `json:"reporting_unit_text,omitempty"`
	ReportingUnitAbs                 *int64  `json:"reporting_unit_abs,omitempty"`
	ReportingUnitTextAbs             *string `json:"reporting_unit_text_abs,omitempty"`
	ReportingCurrencyIso             *string `json:"reporting_currency_iso,omitempty"`
	ReportingCurrencySymbol          *string `json:"reporting_currency_symbol,omitempty"`
	PrimaryTradingItemCurrencyIso    *string `json:"primary_trading_item_currency_iso,omitempty"`
	PrimaryTradingItemCurrencySymbol *string `json:"primary_trading_item_currency_symbol,omitempty"`
	TradingItemCurrencyIso           *string `json:"trading_item_currency_iso,omitempty"`
	TradingItemCurrencySymbol        *string `json:"trading_item_currency_symbol,omitempty"`
}

// NewCompanyAnalysisExtendedRawDataCurrencyInfo instantiates a new CompanyAnalysisExtendedRawDataCurrencyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyAnalysisExtendedRawDataCurrencyInfo() *CompanyAnalysisExtendedRawDataCurrencyInfo {
	this := CompanyAnalysisExtendedRawDataCurrencyInfo{}
	return &this
}

// NewCompanyAnalysisExtendedRawDataCurrencyInfoWithDefaults instantiates a new CompanyAnalysisExtendedRawDataCurrencyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyAnalysisExtendedRawDataCurrencyInfoWithDefaults() *CompanyAnalysisExtendedRawDataCurrencyInfo {
	this := CompanyAnalysisExtendedRawDataCurrencyInfo{}
	return &this
}

// GetReportingUnit returns the ReportingUnit field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetReportingUnit() int64 {
	if o == nil || o.ReportingUnit == nil {
		var ret int64
		return ret
	}
	return *o.ReportingUnit
}

// GetReportingUnitOk returns a tuple with the ReportingUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetReportingUnitOk() (*int64, bool) {
	if o == nil || o.ReportingUnit == nil {
		return nil, false
	}
	return o.ReportingUnit, true
}

// HasReportingUnit returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) HasReportingUnit() bool {
	if o != nil && o.ReportingUnit != nil {
		return true
	}

	return false
}

// SetReportingUnit gets a reference to the given int64 and assigns it to the ReportingUnit field.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) SetReportingUnit(v int64) {
	o.ReportingUnit = &v
}

// GetReportingUnitText returns the ReportingUnitText field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetReportingUnitText() string {
	if o == nil || o.ReportingUnitText == nil {
		var ret string
		return ret
	}
	return *o.ReportingUnitText
}

// GetReportingUnitTextOk returns a tuple with the ReportingUnitText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetReportingUnitTextOk() (*string, bool) {
	if o == nil || o.ReportingUnitText == nil {
		return nil, false
	}
	return o.ReportingUnitText, true
}

// HasReportingUnitText returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) HasReportingUnitText() bool {
	if o != nil && o.ReportingUnitText != nil {
		return true
	}

	return false
}

// SetReportingUnitText gets a reference to the given string and assigns it to the ReportingUnitText field.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) SetReportingUnitText(v string) {
	o.ReportingUnitText = &v
}

// GetReportingUnitAbs returns the ReportingUnitAbs field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetReportingUnitAbs() int64 {
	if o == nil || o.ReportingUnitAbs == nil {
		var ret int64
		return ret
	}
	return *o.ReportingUnitAbs
}

// GetReportingUnitAbsOk returns a tuple with the ReportingUnitAbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetReportingUnitAbsOk() (*int64, bool) {
	if o == nil || o.ReportingUnitAbs == nil {
		return nil, false
	}
	return o.ReportingUnitAbs, true
}

// HasReportingUnitAbs returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) HasReportingUnitAbs() bool {
	if o != nil && o.ReportingUnitAbs != nil {
		return true
	}

	return false
}

// SetReportingUnitAbs gets a reference to the given int64 and assigns it to the ReportingUnitAbs field.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) SetReportingUnitAbs(v int64) {
	o.ReportingUnitAbs = &v
}

// GetReportingUnitTextAbs returns the ReportingUnitTextAbs field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetReportingUnitTextAbs() string {
	if o == nil || o.ReportingUnitTextAbs == nil {
		var ret string
		return ret
	}
	return *o.ReportingUnitTextAbs
}

// GetReportingUnitTextAbsOk returns a tuple with the ReportingUnitTextAbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetReportingUnitTextAbsOk() (*string, bool) {
	if o == nil || o.ReportingUnitTextAbs == nil {
		return nil, false
	}
	return o.ReportingUnitTextAbs, true
}

// HasReportingUnitTextAbs returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) HasReportingUnitTextAbs() bool {
	if o != nil && o.ReportingUnitTextAbs != nil {
		return true
	}

	return false
}

// SetReportingUnitTextAbs gets a reference to the given string and assigns it to the ReportingUnitTextAbs field.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) SetReportingUnitTextAbs(v string) {
	o.ReportingUnitTextAbs = &v
}

// GetReportingCurrencyIso returns the ReportingCurrencyIso field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetReportingCurrencyIso() string {
	if o == nil || o.ReportingCurrencyIso == nil {
		var ret string
		return ret
	}
	return *o.ReportingCurrencyIso
}

// GetReportingCurrencyIsoOk returns a tuple with the ReportingCurrencyIso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetReportingCurrencyIsoOk() (*string, bool) {
	if o == nil || o.ReportingCurrencyIso == nil {
		return nil, false
	}
	return o.ReportingCurrencyIso, true
}

// HasReportingCurrencyIso returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) HasReportingCurrencyIso() bool {
	if o != nil && o.ReportingCurrencyIso != nil {
		return true
	}

	return false
}

// SetReportingCurrencyIso gets a reference to the given string and assigns it to the ReportingCurrencyIso field.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) SetReportingCurrencyIso(v string) {
	o.ReportingCurrencyIso = &v
}

// GetReportingCurrencySymbol returns the ReportingCurrencySymbol field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetReportingCurrencySymbol() string {
	if o == nil || o.ReportingCurrencySymbol == nil {
		var ret string
		return ret
	}
	return *o.ReportingCurrencySymbol
}

// GetReportingCurrencySymbolOk returns a tuple with the ReportingCurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetReportingCurrencySymbolOk() (*string, bool) {
	if o == nil || o.ReportingCurrencySymbol == nil {
		return nil, false
	}
	return o.ReportingCurrencySymbol, true
}

// HasReportingCurrencySymbol returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) HasReportingCurrencySymbol() bool {
	if o != nil && o.ReportingCurrencySymbol != nil {
		return true
	}

	return false
}

// SetReportingCurrencySymbol gets a reference to the given string and assigns it to the ReportingCurrencySymbol field.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) SetReportingCurrencySymbol(v string) {
	o.ReportingCurrencySymbol = &v
}

// GetPrimaryTradingItemCurrencyIso returns the PrimaryTradingItemCurrencyIso field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetPrimaryTradingItemCurrencyIso() string {
	if o == nil || o.PrimaryTradingItemCurrencyIso == nil {
		var ret string
		return ret
	}
	return *o.PrimaryTradingItemCurrencyIso
}

// GetPrimaryTradingItemCurrencyIsoOk returns a tuple with the PrimaryTradingItemCurrencyIso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetPrimaryTradingItemCurrencyIsoOk() (*string, bool) {
	if o == nil || o.PrimaryTradingItemCurrencyIso == nil {
		return nil, false
	}
	return o.PrimaryTradingItemCurrencyIso, true
}

// HasPrimaryTradingItemCurrencyIso returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) HasPrimaryTradingItemCurrencyIso() bool {
	if o != nil && o.PrimaryTradingItemCurrencyIso != nil {
		return true
	}

	return false
}

// SetPrimaryTradingItemCurrencyIso gets a reference to the given string and assigns it to the PrimaryTradingItemCurrencyIso field.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) SetPrimaryTradingItemCurrencyIso(v string) {
	o.PrimaryTradingItemCurrencyIso = &v
}

// GetPrimaryTradingItemCurrencySymbol returns the PrimaryTradingItemCurrencySymbol field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetPrimaryTradingItemCurrencySymbol() string {
	if o == nil || o.PrimaryTradingItemCurrencySymbol == nil {
		var ret string
		return ret
	}
	return *o.PrimaryTradingItemCurrencySymbol
}

// GetPrimaryTradingItemCurrencySymbolOk returns a tuple with the PrimaryTradingItemCurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetPrimaryTradingItemCurrencySymbolOk() (*string, bool) {
	if o == nil || o.PrimaryTradingItemCurrencySymbol == nil {
		return nil, false
	}
	return o.PrimaryTradingItemCurrencySymbol, true
}

// HasPrimaryTradingItemCurrencySymbol returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) HasPrimaryTradingItemCurrencySymbol() bool {
	if o != nil && o.PrimaryTradingItemCurrencySymbol != nil {
		return true
	}

	return false
}

// SetPrimaryTradingItemCurrencySymbol gets a reference to the given string and assigns it to the PrimaryTradingItemCurrencySymbol field.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) SetPrimaryTradingItemCurrencySymbol(v string) {
	o.PrimaryTradingItemCurrencySymbol = &v
}

// GetTradingItemCurrencyIso returns the TradingItemCurrencyIso field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetTradingItemCurrencyIso() string {
	if o == nil || o.TradingItemCurrencyIso == nil {
		var ret string
		return ret
	}
	return *o.TradingItemCurrencyIso
}

// GetTradingItemCurrencyIsoOk returns a tuple with the TradingItemCurrencyIso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetTradingItemCurrencyIsoOk() (*string, bool) {
	if o == nil || o.TradingItemCurrencyIso == nil {
		return nil, false
	}
	return o.TradingItemCurrencyIso, true
}

// HasTradingItemCurrencyIso returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) HasTradingItemCurrencyIso() bool {
	if o != nil && o.TradingItemCurrencyIso != nil {
		return true
	}

	return false
}

// SetTradingItemCurrencyIso gets a reference to the given string and assigns it to the TradingItemCurrencyIso field.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) SetTradingItemCurrencyIso(v string) {
	o.TradingItemCurrencyIso = &v
}

// GetTradingItemCurrencySymbol returns the TradingItemCurrencySymbol field value if set, zero value otherwise.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetTradingItemCurrencySymbol() string {
	if o == nil || o.TradingItemCurrencySymbol == nil {
		var ret string
		return ret
	}
	return *o.TradingItemCurrencySymbol
}

// GetTradingItemCurrencySymbolOk returns a tuple with the TradingItemCurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) GetTradingItemCurrencySymbolOk() (*string, bool) {
	if o == nil || o.TradingItemCurrencySymbol == nil {
		return nil, false
	}
	return o.TradingItemCurrencySymbol, true
}

// HasTradingItemCurrencySymbol returns a boolean if a field has been set.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) HasTradingItemCurrencySymbol() bool {
	if o != nil && o.TradingItemCurrencySymbol != nil {
		return true
	}

	return false
}

// SetTradingItemCurrencySymbol gets a reference to the given string and assigns it to the TradingItemCurrencySymbol field.
func (o *CompanyAnalysisExtendedRawDataCurrencyInfo) SetTradingItemCurrencySymbol(v string) {
	o.TradingItemCurrencySymbol = &v
}

func (o CompanyAnalysisExtendedRawDataCurrencyInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReportingUnit != nil {
		toSerialize["reporting_unit"] = o.ReportingUnit
	}
	if o.ReportingUnitText != nil {
		toSerialize["reporting_unit_text"] = o.ReportingUnitText
	}
	if o.ReportingUnitAbs != nil {
		toSerialize["reporting_unit_abs"] = o.ReportingUnitAbs
	}
	if o.ReportingUnitTextAbs != nil {
		toSerialize["reporting_unit_text_abs"] = o.ReportingUnitTextAbs
	}
	if o.ReportingCurrencyIso != nil {
		toSerialize["reporting_currency_iso"] = o.ReportingCurrencyIso
	}
	if o.ReportingCurrencySymbol != nil {
		toSerialize["reporting_currency_symbol"] = o.ReportingCurrencySymbol
	}
	if o.PrimaryTradingItemCurrencyIso != nil {
		toSerialize["primary_trading_item_currency_iso"] = o.PrimaryTradingItemCurrencyIso
	}
	if o.PrimaryTradingItemCurrencySymbol != nil {
		toSerialize["primary_trading_item_currency_symbol"] = o.PrimaryTradingItemCurrencySymbol
	}
	if o.TradingItemCurrencyIso != nil {
		toSerialize["trading_item_currency_iso"] = o.TradingItemCurrencyIso
	}
	if o.TradingItemCurrencySymbol != nil {
		toSerialize["trading_item_currency_symbol"] = o.TradingItemCurrencySymbol
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyAnalysisExtendedRawDataCurrencyInfo struct {
	value *CompanyAnalysisExtendedRawDataCurrencyInfo
	isSet bool
}

func (v NullableCompanyAnalysisExtendedRawDataCurrencyInfo) Get() *CompanyAnalysisExtendedRawDataCurrencyInfo {
	return v.value
}

func (v *NullableCompanyAnalysisExtendedRawDataCurrencyInfo) Set(val *CompanyAnalysisExtendedRawDataCurrencyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyAnalysisExtendedRawDataCurrencyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyAnalysisExtendedRawDataCurrencyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyAnalysisExtendedRawDataCurrencyInfo(val *CompanyAnalysisExtendedRawDataCurrencyInfo) *NullableCompanyAnalysisExtendedRawDataCurrencyInfo {
	return &NullableCompanyAnalysisExtendedRawDataCurrencyInfo{value: val, isSet: true}
}

func (v NullableCompanyAnalysisExtendedRawDataCurrencyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyAnalysisExtendedRawDataCurrencyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
